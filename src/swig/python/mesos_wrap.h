/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_mesos_WRAP_H_
#define SWIG_mesos_WRAP_H_

#include <map>
#include <string>


class SwigDirector_Scheduler : public mesos::Scheduler, public Swig::Director {

public:
    SwigDirector_Scheduler(PyObject *self);
    virtual ~SwigDirector_Scheduler();
    virtual std::string getFrameworkName(mesos::SchedulerDriver *arg0);
    virtual mesos::ExecutorInfo getExecutorInfo(mesos::SchedulerDriver *arg0);
    virtual void registered(mesos::SchedulerDriver *d, mesos::FrameworkID fid);
    virtual void resourceOffer(mesos::SchedulerDriver *d, mesos::OfferID oid, std::vector< mesos::SlaveOffer,std::allocator< mesos::SlaveOffer > > const &offers);
    virtual void offerRescinded(mesos::SchedulerDriver *d, mesos::OfferID oid);
    virtual void statusUpdate(mesos::SchedulerDriver *d, mesos::TaskStatus const &status);
    virtual void frameworkMessage(mesos::SchedulerDriver *d, mesos::FrameworkMessage const &message);
    virtual void slaveLost(mesos::SchedulerDriver *d, mesos::SlaveID sid);
    virtual void error(mesos::SchedulerDriver *d, int code, std::string const &message);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class Scheduler doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[9];
#endif

};


class SwigDirector_Executor : public mesos::Executor, public Swig::Director {

public:
    SwigDirector_Executor(PyObject *self);
    virtual ~SwigDirector_Executor();
    virtual void init(mesos::ExecutorDriver *d, mesos::ExecutorArgs const &args);
    virtual void launchTask(mesos::ExecutorDriver *d, mesos::TaskDescription const &task);
    virtual void killTask(mesos::ExecutorDriver *d, mesos::TaskID taskId);
    virtual void frameworkMessage(mesos::ExecutorDriver *d, mesos::FrameworkMessage const &message);
    virtual void shutdown(mesos::ExecutorDriver *d);
    virtual void error(mesos::ExecutorDriver *d, int code, std::string const &message);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class Executor doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[6];
#endif

};


#endif
