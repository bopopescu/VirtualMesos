# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mesos', [dirname(__file__)])
        except ImportError:
            import _mesos
            return _mesos
        if fp is not None:
            try:
                _mod = imp.load_module('_mesos', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mesos = swig_import_helper()
    del swig_import_helper
else:
    import _mesos
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mesos.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _mesos.SwigPyIterator_value(self)
    def incr(self, n = 1): return _mesos.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _mesos.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _mesos.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _mesos.SwigPyIterator_equal(self, *args)
    def copy(self): return _mesos.SwigPyIterator_copy(self)
    def next(self): return _mesos.SwigPyIterator_next(self)
    def __next__(self): return _mesos.SwigPyIterator___next__(self)
    def previous(self): return _mesos.SwigPyIterator_previous(self)
    def advance(self, *args): return _mesos.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _mesos.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _mesos.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _mesos.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _mesos.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _mesos.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _mesos.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _mesos.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SlaveOfferVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlaveOfferVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlaveOfferVector, name)
    __repr__ = _swig_repr
    def __nonzero__(self): return _mesos.SlaveOfferVector___nonzero__(self)
    def __bool__(self): return _mesos.SlaveOfferVector___bool__(self)
    def __len__(self): return _mesos.SlaveOfferVector___len__(self)
    def pop(self): return _mesos.SlaveOfferVector_pop(self)
    def __getslice__(self, *args): return _mesos.SlaveOfferVector___getslice__(self, *args)
    def __setslice__(self, *args): return _mesos.SlaveOfferVector___setslice__(self, *args)
    def __delslice__(self, *args): return _mesos.SlaveOfferVector___delslice__(self, *args)
    def __delitem__(self, *args): return _mesos.SlaveOfferVector___delitem__(self, *args)
    def __getitem__(self, *args): return _mesos.SlaveOfferVector___getitem__(self, *args)
    def __setitem__(self, *args): return _mesos.SlaveOfferVector___setitem__(self, *args)
    def append(self, *args): return _mesos.SlaveOfferVector_append(self, *args)
    def empty(self): return _mesos.SlaveOfferVector_empty(self)
    def size(self): return _mesos.SlaveOfferVector_size(self)
    def clear(self): return _mesos.SlaveOfferVector_clear(self)
    def swap(self, *args): return _mesos.SlaveOfferVector_swap(self, *args)
    def get_allocator(self): return _mesos.SlaveOfferVector_get_allocator(self)
    def pop_back(self): return _mesos.SlaveOfferVector_pop_back(self)
    def __init__(self, *args): 
        this = _mesos.new_SlaveOfferVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mesos.SlaveOfferVector_push_back(self, *args)
    def front(self): return _mesos.SlaveOfferVector_front(self)
    def back(self): return _mesos.SlaveOfferVector_back(self)
    def assign(self, *args): return _mesos.SlaveOfferVector_assign(self, *args)
    def resize(self, *args): return _mesos.SlaveOfferVector_resize(self, *args)
    def reserve(self, *args): return _mesos.SlaveOfferVector_reserve(self, *args)
    def capacity(self): return _mesos.SlaveOfferVector_capacity(self)
    __swig_destroy__ = _mesos.delete_SlaveOfferVector
    __del__ = lambda self : None;
SlaveOfferVector_swigregister = _mesos.SlaveOfferVector_swigregister
SlaveOfferVector_swigregister(SlaveOfferVector)

class TaskDescriptionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskDescriptionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskDescriptionVector, name)
    __repr__ = _swig_repr
    def __nonzero__(self): return _mesos.TaskDescriptionVector___nonzero__(self)
    def __bool__(self): return _mesos.TaskDescriptionVector___bool__(self)
    def __len__(self): return _mesos.TaskDescriptionVector___len__(self)
    def pop(self): return _mesos.TaskDescriptionVector_pop(self)
    def __getslice__(self, *args): return _mesos.TaskDescriptionVector___getslice__(self, *args)
    def __setslice__(self, *args): return _mesos.TaskDescriptionVector___setslice__(self, *args)
    def __delslice__(self, *args): return _mesos.TaskDescriptionVector___delslice__(self, *args)
    def __delitem__(self, *args): return _mesos.TaskDescriptionVector___delitem__(self, *args)
    def __getitem__(self, *args): return _mesos.TaskDescriptionVector___getitem__(self, *args)
    def __setitem__(self, *args): return _mesos.TaskDescriptionVector___setitem__(self, *args)
    def append(self, *args): return _mesos.TaskDescriptionVector_append(self, *args)
    def empty(self): return _mesos.TaskDescriptionVector_empty(self)
    def size(self): return _mesos.TaskDescriptionVector_size(self)
    def clear(self): return _mesos.TaskDescriptionVector_clear(self)
    def swap(self, *args): return _mesos.TaskDescriptionVector_swap(self, *args)
    def get_allocator(self): return _mesos.TaskDescriptionVector_get_allocator(self)
    def pop_back(self): return _mesos.TaskDescriptionVector_pop_back(self)
    def __init__(self, *args): 
        this = _mesos.new_TaskDescriptionVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mesos.TaskDescriptionVector_push_back(self, *args)
    def front(self): return _mesos.TaskDescriptionVector_front(self)
    def back(self): return _mesos.TaskDescriptionVector_back(self)
    def assign(self, *args): return _mesos.TaskDescriptionVector_assign(self, *args)
    def resize(self, *args): return _mesos.TaskDescriptionVector_resize(self, *args)
    def reserve(self, *args): return _mesos.TaskDescriptionVector_reserve(self, *args)
    def capacity(self): return _mesos.TaskDescriptionVector_capacity(self)
    __swig_destroy__ = _mesos.delete_TaskDescriptionVector
    __del__ = lambda self : None;
TaskDescriptionVector_swigregister = _mesos.TaskDescriptionVector_swigregister
TaskDescriptionVector_swigregister(TaskDescriptionVector)

class StringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    __repr__ = _swig_repr
    def __nonzero__(self): return _mesos.StringMap___nonzero__(self)
    def __bool__(self): return _mesos.StringMap___bool__(self)
    def __len__(self): return _mesos.StringMap___len__(self)
    def __getitem__(self, *args): return _mesos.StringMap___getitem__(self, *args)
    def __delitem__(self, *args): return _mesos.StringMap___delitem__(self, *args)
    def has_key(self, *args): return _mesos.StringMap_has_key(self, *args)
    def keys(self): return _mesos.StringMap_keys(self)
    def values(self): return _mesos.StringMap_values(self)
    def items(self): return _mesos.StringMap_items(self)
    def __contains__(self, *args): return _mesos.StringMap___contains__(self, *args)
    def key_iterator(self): return _mesos.StringMap_key_iterator(self)
    def value_iterator(self): return _mesos.StringMap_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _mesos.StringMap___setitem__(self, *args)
    def __init__(self, *args): 
        this = _mesos.new_StringMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _mesos.StringMap_empty(self)
    def size(self): return _mesos.StringMap_size(self)
    def clear(self): return _mesos.StringMap_clear(self)
    def swap(self, *args): return _mesos.StringMap_swap(self, *args)
    def get_allocator(self): return _mesos.StringMap_get_allocator(self)
    def erase(self, *args): return _mesos.StringMap_erase(self, *args)
    def count(self, *args): return _mesos.StringMap_count(self, *args)
    __swig_destroy__ = _mesos.delete_StringMap
    __del__ = lambda self : None;
StringMap_swigregister = _mesos.StringMap_swigregister
StringMap_swigregister(StringMap)

TASK_STARTING = _mesos.TASK_STARTING
TASK_RUNNING = _mesos.TASK_RUNNING
TASK_FINISHED = _mesos.TASK_FINISHED
TASK_FAILED = _mesos.TASK_FAILED
TASK_KILLED = _mesos.TASK_KILLED
TASK_LOST = _mesos.TASK_LOST
class TaskDescription(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskDescription, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mesos.new_TaskDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["taskId"] = _mesos.TaskDescription_taskId_set
    __swig_getmethods__["taskId"] = _mesos.TaskDescription_taskId_get
    if _newclass:taskId = _swig_property(_mesos.TaskDescription_taskId_get, _mesos.TaskDescription_taskId_set)
    __swig_setmethods__["slaveId"] = _mesos.TaskDescription_slaveId_set
    __swig_getmethods__["slaveId"] = _mesos.TaskDescription_slaveId_get
    if _newclass:slaveId = _swig_property(_mesos.TaskDescription_slaveId_get, _mesos.TaskDescription_slaveId_set)
    __swig_setmethods__["name"] = _mesos.TaskDescription_name_set
    __swig_getmethods__["name"] = _mesos.TaskDescription_name_get
    if _newclass:name = _swig_property(_mesos.TaskDescription_name_get, _mesos.TaskDescription_name_set)
    __swig_setmethods__["params"] = _mesos.TaskDescription_params_set
    __swig_getmethods__["params"] = _mesos.TaskDescription_params_get
    if _newclass:params = _swig_property(_mesos.TaskDescription_params_get, _mesos.TaskDescription_params_set)
    __swig_setmethods__["arg"] = _mesos.TaskDescription_arg_set
    __swig_getmethods__["arg"] = _mesos.TaskDescription_arg_get
    if _newclass:arg = _swig_property(_mesos.TaskDescription_arg_get, _mesos.TaskDescription_arg_set)
    __swig_destroy__ = _mesos.delete_TaskDescription
    __del__ = lambda self : None;
TaskDescription_swigregister = _mesos.TaskDescription_swigregister
TaskDescription_swigregister(TaskDescription)

class TaskStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskStatus, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mesos.new_TaskStatus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["taskId"] = _mesos.TaskStatus_taskId_set
    __swig_getmethods__["taskId"] = _mesos.TaskStatus_taskId_get
    if _newclass:taskId = _swig_property(_mesos.TaskStatus_taskId_get, _mesos.TaskStatus_taskId_set)
    __swig_setmethods__["state"] = _mesos.TaskStatus_state_set
    __swig_getmethods__["state"] = _mesos.TaskStatus_state_get
    if _newclass:state = _swig_property(_mesos.TaskStatus_state_get, _mesos.TaskStatus_state_set)
    __swig_setmethods__["data"] = _mesos.TaskStatus_data_set
    __swig_getmethods__["data"] = _mesos.TaskStatus_data_get
    if _newclass:data = _swig_property(_mesos.TaskStatus_data_get, _mesos.TaskStatus_data_set)
    __swig_destroy__ = _mesos.delete_TaskStatus
    __del__ = lambda self : None;
TaskStatus_swigregister = _mesos.TaskStatus_swigregister
TaskStatus_swigregister(TaskStatus)

class SlaveOffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlaveOffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlaveOffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mesos.new_SlaveOffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["slaveId"] = _mesos.SlaveOffer_slaveId_set
    __swig_getmethods__["slaveId"] = _mesos.SlaveOffer_slaveId_get
    if _newclass:slaveId = _swig_property(_mesos.SlaveOffer_slaveId_get, _mesos.SlaveOffer_slaveId_set)
    __swig_setmethods__["host"] = _mesos.SlaveOffer_host_set
    __swig_getmethods__["host"] = _mesos.SlaveOffer_host_get
    if _newclass:host = _swig_property(_mesos.SlaveOffer_host_get, _mesos.SlaveOffer_host_set)
    __swig_setmethods__["params"] = _mesos.SlaveOffer_params_set
    __swig_getmethods__["params"] = _mesos.SlaveOffer_params_get
    if _newclass:params = _swig_property(_mesos.SlaveOffer_params_get, _mesos.SlaveOffer_params_set)
    __swig_destroy__ = _mesos.delete_SlaveOffer
    __del__ = lambda self : None;
SlaveOffer_swigregister = _mesos.SlaveOffer_swigregister
SlaveOffer_swigregister(SlaveOffer)

class FrameworkMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameworkMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameworkMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mesos.new_FrameworkMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["slaveId"] = _mesos.FrameworkMessage_slaveId_set
    __swig_getmethods__["slaveId"] = _mesos.FrameworkMessage_slaveId_get
    if _newclass:slaveId = _swig_property(_mesos.FrameworkMessage_slaveId_get, _mesos.FrameworkMessage_slaveId_set)
    __swig_setmethods__["taskId"] = _mesos.FrameworkMessage_taskId_set
    __swig_getmethods__["taskId"] = _mesos.FrameworkMessage_taskId_get
    if _newclass:taskId = _swig_property(_mesos.FrameworkMessage_taskId_get, _mesos.FrameworkMessage_taskId_set)
    __swig_setmethods__["data"] = _mesos.FrameworkMessage_data_set
    __swig_getmethods__["data"] = _mesos.FrameworkMessage_data_get
    if _newclass:data = _swig_property(_mesos.FrameworkMessage_data_get, _mesos.FrameworkMessage_data_set)
    __swig_destroy__ = _mesos.delete_FrameworkMessage
    __del__ = lambda self : None;
FrameworkMessage_swigregister = _mesos.FrameworkMessage_swigregister
FrameworkMessage_swigregister(FrameworkMessage)

class ExecutorInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecutorInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExecutorInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mesos.new_ExecutorInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["uri"] = _mesos.ExecutorInfo_uri_set
    __swig_getmethods__["uri"] = _mesos.ExecutorInfo_uri_get
    if _newclass:uri = _swig_property(_mesos.ExecutorInfo_uri_get, _mesos.ExecutorInfo_uri_set)
    __swig_setmethods__["initArg"] = _mesos.ExecutorInfo_initArg_set
    __swig_getmethods__["initArg"] = _mesos.ExecutorInfo_initArg_get
    if _newclass:initArg = _swig_property(_mesos.ExecutorInfo_initArg_get, _mesos.ExecutorInfo_initArg_set)
    __swig_setmethods__["params"] = _mesos.ExecutorInfo_params_set
    __swig_getmethods__["params"] = _mesos.ExecutorInfo_params_get
    if _newclass:params = _swig_property(_mesos.ExecutorInfo_params_get, _mesos.ExecutorInfo_params_set)
    __swig_destroy__ = _mesos.delete_ExecutorInfo
    __del__ = lambda self : None;
ExecutorInfo_swigregister = _mesos.ExecutorInfo_swigregister
ExecutorInfo_swigregister(ExecutorInfo)

class Scheduler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scheduler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scheduler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mesos.delete_Scheduler
    __del__ = lambda self : None;
    def getFrameworkName(self, *args): return _mesos.Scheduler_getFrameworkName(self, *args)
    def getExecutorInfo(self, *args): return _mesos.Scheduler_getExecutorInfo(self, *args)
    def registered(self, *args): return _mesos.Scheduler_registered(self, *args)
    def resourceOffer(self, *args): return _mesos.Scheduler_resourceOffer(self, *args)
    def offerRescinded(self, *args): return _mesos.Scheduler_offerRescinded(self, *args)
    def statusUpdate(self, *args): return _mesos.Scheduler_statusUpdate(self, *args)
    def frameworkMessage(self, *args): return _mesos.Scheduler_frameworkMessage(self, *args)
    def slaveLost(self, *args): return _mesos.Scheduler_slaveLost(self, *args)
    def error(self, *args): return _mesos.Scheduler_error(self, *args)
    def __init__(self): 
        if self.__class__ == Scheduler:
            _self = None
        else:
            _self = self
        this = _mesos.new_Scheduler(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _mesos.disown_Scheduler(self)
        return weakref_proxy(self)
Scheduler_swigregister = _mesos.Scheduler_swigregister
Scheduler_swigregister(Scheduler)

class SchedulerDriver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchedulerDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchedulerDriver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mesos.delete_SchedulerDriver
    __del__ = lambda self : None;
    def start(self): return _mesos.SchedulerDriver_start(self)
    def stop(self): return _mesos.SchedulerDriver_stop(self)
    def join(self): return _mesos.SchedulerDriver_join(self)
    def run(self): return _mesos.SchedulerDriver_run(self)
    def sendFrameworkMessage(self, *args): return _mesos.SchedulerDriver_sendFrameworkMessage(self, *args)
    def killTask(self, *args): return _mesos.SchedulerDriver_killTask(self, *args)
    def replyToOffer(self, *args): return _mesos.SchedulerDriver_replyToOffer(self, *args)
    def reviveOffers(self): return _mesos.SchedulerDriver_reviveOffers(self)
    def sendHints(self, *args): return _mesos.SchedulerDriver_sendHints(self, *args)
    def __init__(self): 
        this = _mesos.new_SchedulerDriver()
        try: self.this.append(this)
        except: self.this = this
SchedulerDriver_swigregister = _mesos.SchedulerDriver_swigregister
SchedulerDriver_swigregister(SchedulerDriver)

class MesosSchedulerDriver(SchedulerDriver):
    __swig_setmethods__ = {}
    for _s in [SchedulerDriver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MesosSchedulerDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulerDriver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MesosSchedulerDriver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mesos.new_MesosSchedulerDriver(*args)
        try: self.this.append(this)
        except: self.this = this
        self.scheduler = args[0]



    __swig_destroy__ = _mesos.delete_MesosSchedulerDriver
    __del__ = lambda self : None;
    def start(self): return _mesos.MesosSchedulerDriver_start(self)
    def stop(self): return _mesos.MesosSchedulerDriver_stop(self)
    def join(self): return _mesos.MesosSchedulerDriver_join(self)
    def run(self): return _mesos.MesosSchedulerDriver_run(self)
    def sendFrameworkMessage(self, *args): return _mesos.MesosSchedulerDriver_sendFrameworkMessage(self, *args)
    def killTask(self, *args): return _mesos.MesosSchedulerDriver_killTask(self, *args)
    def replyToOffer(self, *args): return _mesos.MesosSchedulerDriver_replyToOffer(self, *args)
    def reviveOffers(self): return _mesos.MesosSchedulerDriver_reviveOffers(self)
    def sendHints(self, *args): return _mesos.MesosSchedulerDriver_sendHints(self, *args)
    def getScheduler(self): return _mesos.MesosSchedulerDriver_getScheduler(self)
MesosSchedulerDriver_swigregister = _mesos.MesosSchedulerDriver_swigregister
MesosSchedulerDriver_swigregister(MesosSchedulerDriver)

class ExecutorArgs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecutorArgs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExecutorArgs, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mesos.new_ExecutorArgs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["slaveId"] = _mesos.ExecutorArgs_slaveId_set
    __swig_getmethods__["slaveId"] = _mesos.ExecutorArgs_slaveId_get
    if _newclass:slaveId = _swig_property(_mesos.ExecutorArgs_slaveId_get, _mesos.ExecutorArgs_slaveId_set)
    __swig_setmethods__["host"] = _mesos.ExecutorArgs_host_set
    __swig_getmethods__["host"] = _mesos.ExecutorArgs_host_get
    if _newclass:host = _swig_property(_mesos.ExecutorArgs_host_get, _mesos.ExecutorArgs_host_set)
    __swig_setmethods__["frameworkId"] = _mesos.ExecutorArgs_frameworkId_set
    __swig_getmethods__["frameworkId"] = _mesos.ExecutorArgs_frameworkId_get
    if _newclass:frameworkId = _swig_property(_mesos.ExecutorArgs_frameworkId_get, _mesos.ExecutorArgs_frameworkId_set)
    __swig_setmethods__["frameworkName"] = _mesos.ExecutorArgs_frameworkName_set
    __swig_getmethods__["frameworkName"] = _mesos.ExecutorArgs_frameworkName_get
    if _newclass:frameworkName = _swig_property(_mesos.ExecutorArgs_frameworkName_get, _mesos.ExecutorArgs_frameworkName_set)
    __swig_setmethods__["data"] = _mesos.ExecutorArgs_data_set
    __swig_getmethods__["data"] = _mesos.ExecutorArgs_data_get
    if _newclass:data = _swig_property(_mesos.ExecutorArgs_data_get, _mesos.ExecutorArgs_data_set)
    __swig_destroy__ = _mesos.delete_ExecutorArgs
    __del__ = lambda self : None;
ExecutorArgs_swigregister = _mesos.ExecutorArgs_swigregister
ExecutorArgs_swigregister(ExecutorArgs)

class Executor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Executor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Executor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mesos.delete_Executor
    __del__ = lambda self : None;
    def init(self, *args): return _mesos.Executor_init(self, *args)
    def launchTask(self, *args): return _mesos.Executor_launchTask(self, *args)
    def killTask(self, *args): return _mesos.Executor_killTask(self, *args)
    def frameworkMessage(self, *args): return _mesos.Executor_frameworkMessage(self, *args)
    def shutdown(self, *args): return _mesos.Executor_shutdown(self, *args)
    def error(self, *args): return _mesos.Executor_error(self, *args)
    def __init__(self): 
        if self.__class__ == Executor:
            _self = None
        else:
            _self = self
        this = _mesos.new_Executor(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _mesos.disown_Executor(self)
        return weakref_proxy(self)
Executor_swigregister = _mesos.Executor_swigregister
Executor_swigregister(Executor)

class ExecutorDriver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecutorDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExecutorDriver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mesos.delete_ExecutorDriver
    __del__ = lambda self : None;
    def start(self): return _mesos.ExecutorDriver_start(self)
    def stop(self): return _mesos.ExecutorDriver_stop(self)
    def join(self): return _mesos.ExecutorDriver_join(self)
    def run(self): return _mesos.ExecutorDriver_run(self)
    def sendStatusUpdate(self, *args): return _mesos.ExecutorDriver_sendStatusUpdate(self, *args)
    def sendFrameworkMessage(self, *args): return _mesos.ExecutorDriver_sendFrameworkMessage(self, *args)
    def __init__(self): 
        this = _mesos.new_ExecutorDriver()
        try: self.this.append(this)
        except: self.this = this
ExecutorDriver_swigregister = _mesos.ExecutorDriver_swigregister
ExecutorDriver_swigregister(ExecutorDriver)

class MesosExecutorDriver(ExecutorDriver):
    __swig_setmethods__ = {}
    for _s in [ExecutorDriver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MesosExecutorDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [ExecutorDriver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MesosExecutorDriver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mesos.new_MesosExecutorDriver(*args)
        try: self.this.append(this)
        except: self.this = this
        self.executor = args[0]



    __swig_destroy__ = _mesos.delete_MesosExecutorDriver
    __del__ = lambda self : None;
    def start(self): return _mesos.MesosExecutorDriver_start(self)
    def stop(self): return _mesos.MesosExecutorDriver_stop(self)
    def join(self): return _mesos.MesosExecutorDriver_join(self)
    def run(self): return _mesos.MesosExecutorDriver_run(self)
    def sendStatusUpdate(self, *args): return _mesos.MesosExecutorDriver_sendStatusUpdate(self, *args)
    def sendFrameworkMessage(self, *args): return _mesos.MesosExecutorDriver_sendFrameworkMessage(self, *args)
    def getExecutor(self): return _mesos.MesosExecutorDriver_getExecutor(self)
MesosExecutorDriver_swigregister = _mesos.MesosExecutorDriver_swigregister
MesosExecutorDriver_swigregister(MesosExecutorDriver)



