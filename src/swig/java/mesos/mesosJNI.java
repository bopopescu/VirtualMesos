/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package mesos;

class mesosJNI {
  public final static native long new_TaskDescription__SWIG_0();
  public final static native long new_TaskDescription__SWIG_1(int jarg1, String jarg2, String jarg3, java.util.Map<String, String> jarg4, byte[] jarg5);
  public final static native void TaskDescription_taskId_set(long jarg1, TaskDescription jarg1_, int jarg2);
  public final static native int TaskDescription_taskId_get(long jarg1, TaskDescription jarg1_);
  public final static native void TaskDescription_slaveId_set(long jarg1, TaskDescription jarg1_, String jarg2);
  public final static native String TaskDescription_slaveId_get(long jarg1, TaskDescription jarg1_);
  public final static native void TaskDescription_name_set(long jarg1, TaskDescription jarg1_, String jarg2);
  public final static native String TaskDescription_name_get(long jarg1, TaskDescription jarg1_);
  public final static native void TaskDescription_params_set(long jarg1, TaskDescription jarg1_, java.util.Map<String, String> jarg2);
  public final static native java.util.Map<String, String> TaskDescription_params_get(long jarg1, TaskDescription jarg1_);
  public final static native void TaskDescription_arg_set(long jarg1, TaskDescription jarg1_, byte[] jarg2);
  public final static native byte[] TaskDescription_arg_get(long jarg1, TaskDescription jarg1_);
  public final static native void delete_TaskDescription(long jarg1);
  public final static native long new_TaskStatus__SWIG_0();
  public final static native long new_TaskStatus__SWIG_1(int jarg1, int jarg2, byte[] jarg3);
  public final static native void TaskStatus_taskId_set(long jarg1, TaskStatus jarg1_, int jarg2);
  public final static native int TaskStatus_taskId_get(long jarg1, TaskStatus jarg1_);
  public final static native void TaskStatus_state_set(long jarg1, TaskStatus jarg1_, int jarg2);
  public final static native int TaskStatus_state_get(long jarg1, TaskStatus jarg1_);
  public final static native void TaskStatus_data_set(long jarg1, TaskStatus jarg1_, byte[] jarg2);
  public final static native byte[] TaskStatus_data_get(long jarg1, TaskStatus jarg1_);
  public final static native void delete_TaskStatus(long jarg1);
  public final static native long new_SlaveOffer__SWIG_0();
  public final static native long new_SlaveOffer__SWIG_1(String jarg1, String jarg2, java.util.Map<String, String> jarg3);
  public final static native void SlaveOffer_slaveId_set(long jarg1, SlaveOffer jarg1_, String jarg2);
  public final static native String SlaveOffer_slaveId_get(long jarg1, SlaveOffer jarg1_);
  public final static native void SlaveOffer_host_set(long jarg1, SlaveOffer jarg1_, String jarg2);
  public final static native String SlaveOffer_host_get(long jarg1, SlaveOffer jarg1_);
  public final static native void SlaveOffer_params_set(long jarg1, SlaveOffer jarg1_, java.util.Map<String, String> jarg2);
  public final static native java.util.Map<String, String> SlaveOffer_params_get(long jarg1, SlaveOffer jarg1_);
  public final static native void delete_SlaveOffer(long jarg1);
  public final static native long new_FrameworkMessage__SWIG_0();
  public final static native long new_FrameworkMessage__SWIG_1(String jarg1, int jarg2, byte[] jarg3);
  public final static native void FrameworkMessage_slaveId_set(long jarg1, FrameworkMessage jarg1_, String jarg2);
  public final static native String FrameworkMessage_slaveId_get(long jarg1, FrameworkMessage jarg1_);
  public final static native void FrameworkMessage_taskId_set(long jarg1, FrameworkMessage jarg1_, int jarg2);
  public final static native int FrameworkMessage_taskId_get(long jarg1, FrameworkMessage jarg1_);
  public final static native void FrameworkMessage_data_set(long jarg1, FrameworkMessage jarg1_, byte[] jarg2);
  public final static native byte[] FrameworkMessage_data_get(long jarg1, FrameworkMessage jarg1_);
  public final static native void delete_FrameworkMessage(long jarg1);
  public final static native long new_ExecutorInfo__SWIG_0();
  public final static native long new_ExecutorInfo__SWIG_1(String jarg1, byte[] jarg2);
  public final static native long new_ExecutorInfo__SWIG_2(String jarg1, byte[] jarg2, java.util.Map<String, String> jarg3);
  public final static native void ExecutorInfo_uri_set(long jarg1, ExecutorInfo jarg1_, String jarg2);
  public final static native String ExecutorInfo_uri_get(long jarg1, ExecutorInfo jarg1_);
  public final static native void ExecutorInfo_initArg_set(long jarg1, ExecutorInfo jarg1_, byte[] jarg2);
  public final static native byte[] ExecutorInfo_initArg_get(long jarg1, ExecutorInfo jarg1_);
  public final static native void ExecutorInfo_params_set(long jarg1, ExecutorInfo jarg1_, java.util.Map<String, String> jarg2);
  public final static native java.util.Map<String, String> ExecutorInfo_params_get(long jarg1, ExecutorInfo jarg1_);
  public final static native void delete_ExecutorInfo(long jarg1);
  public final static native void delete_Scheduler(long jarg1);
  public final static native String Scheduler_getFrameworkName(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_);
  public final static native String Scheduler_getFrameworkNameSwigExplicitScheduler(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_);
  public final static native long Scheduler_getExecutorInfo(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_);
  public final static native long Scheduler_getExecutorInfoSwigExplicitScheduler(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_);
  public final static native void Scheduler_registered(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, String jarg3);
  public final static native void Scheduler_registeredSwigExplicitScheduler(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, String jarg3);
  public final static native void Scheduler_resourceOffer(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, String jarg3, java.util.List<SlaveOffer> jarg4);
  public final static native void Scheduler_resourceOfferSwigExplicitScheduler(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, String jarg3, java.util.List<SlaveOffer> jarg4);
  public final static native void Scheduler_offerRescinded(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, String jarg3);
  public final static native void Scheduler_offerRescindedSwigExplicitScheduler(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, String jarg3);
  public final static native void Scheduler_statusUpdate(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, long jarg3, TaskStatus jarg3_);
  public final static native void Scheduler_statusUpdateSwigExplicitScheduler(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, long jarg3, TaskStatus jarg3_);
  public final static native void Scheduler_frameworkMessage(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, long jarg3, FrameworkMessage jarg3_);
  public final static native void Scheduler_frameworkMessageSwigExplicitScheduler(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, long jarg3, FrameworkMessage jarg3_);
  public final static native void Scheduler_slaveLost(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, String jarg3);
  public final static native void Scheduler_slaveLostSwigExplicitScheduler(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, String jarg3);
  public final static native void Scheduler_error(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, int jarg3, String jarg4);
  public final static native void Scheduler_errorSwigExplicitScheduler(long jarg1, Scheduler jarg1_, long jarg2, SchedulerDriver jarg2_, int jarg3, String jarg4);
  public final static native long new_Scheduler();
  public final static native void Scheduler_director_connect(Scheduler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Scheduler_change_ownership(Scheduler obj, long cptr, boolean take_or_release);
  public final static native void delete_SchedulerDriver(long jarg1);
  public final static native int SchedulerDriver_start(long jarg1, SchedulerDriver jarg1_);
  public final static native int SchedulerDriver_stop(long jarg1, SchedulerDriver jarg1_);
  public final static native int SchedulerDriver_join(long jarg1, SchedulerDriver jarg1_);
  public final static native int SchedulerDriver_run(long jarg1, SchedulerDriver jarg1_);
  public final static native int SchedulerDriver_sendFrameworkMessage(long jarg1, SchedulerDriver jarg1_, long jarg2, FrameworkMessage jarg2_);
  public final static native int SchedulerDriver_killTask(long jarg1, SchedulerDriver jarg1_, int jarg2);
  public final static native int SchedulerDriver_replyToOffer(long jarg1, SchedulerDriver jarg1_, String jarg2, java.util.List<TaskDescription> jarg3, java.util.Map<String, String> jarg4);
  public final static native int SchedulerDriver_reviveOffers(long jarg1, SchedulerDriver jarg1_);
  public final static native int SchedulerDriver_sendHints(long jarg1, SchedulerDriver jarg1_, java.util.Map<String, String> jarg2);
  public final static native long new_SchedulerDriver();
  public final static native long new_MesosSchedulerDriver__SWIG_0(long jarg1, Scheduler jarg1_, String jarg2, String jarg3);
  public final static native long new_MesosSchedulerDriver__SWIG_1(long jarg1, Scheduler jarg1_, String jarg2);
  public final static native long new_MesosSchedulerDriver__SWIG_2(long jarg1, Scheduler jarg1_, java.util.Map<String, String> jarg2, String jarg3);
  public final static native long new_MesosSchedulerDriver__SWIG_3(long jarg1, Scheduler jarg1_, java.util.Map<String, String> jarg2);
  public final static native void delete_MesosSchedulerDriver(long jarg1);
  public final static native int MesosSchedulerDriver_start(long jarg1, MesosSchedulerDriver jarg1_);
  public final static native int MesosSchedulerDriver_stop(long jarg1, MesosSchedulerDriver jarg1_);
  public final static native int MesosSchedulerDriver_join(long jarg1, MesosSchedulerDriver jarg1_);
  public final static native int MesosSchedulerDriver_run(long jarg1, MesosSchedulerDriver jarg1_);
  public final static native int MesosSchedulerDriver_sendFrameworkMessage(long jarg1, MesosSchedulerDriver jarg1_, long jarg2, FrameworkMessage jarg2_);
  public final static native int MesosSchedulerDriver_killTask(long jarg1, MesosSchedulerDriver jarg1_, int jarg2);
  public final static native int MesosSchedulerDriver_replyToOffer(long jarg1, MesosSchedulerDriver jarg1_, String jarg2, java.util.List<TaskDescription> jarg3, java.util.Map<String, String> jarg4);
  public final static native int MesosSchedulerDriver_reviveOffers(long jarg1, MesosSchedulerDriver jarg1_);
  public final static native int MesosSchedulerDriver_sendHints(long jarg1, MesosSchedulerDriver jarg1_, java.util.Map<String, String> jarg2);
  public final static native long MesosSchedulerDriver_getScheduler(long jarg1, MesosSchedulerDriver jarg1_);
  public final static native long new_ExecutorArgs__SWIG_0();
  public final static native long new_ExecutorArgs__SWIG_1(String jarg1, String jarg2, String jarg3, String jarg4, byte[] jarg5);
  public final static native void ExecutorArgs_slaveId_set(long jarg1, ExecutorArgs jarg1_, String jarg2);
  public final static native String ExecutorArgs_slaveId_get(long jarg1, ExecutorArgs jarg1_);
  public final static native void ExecutorArgs_host_set(long jarg1, ExecutorArgs jarg1_, String jarg2);
  public final static native String ExecutorArgs_host_get(long jarg1, ExecutorArgs jarg1_);
  public final static native void ExecutorArgs_frameworkId_set(long jarg1, ExecutorArgs jarg1_, String jarg2);
  public final static native String ExecutorArgs_frameworkId_get(long jarg1, ExecutorArgs jarg1_);
  public final static native void ExecutorArgs_frameworkName_set(long jarg1, ExecutorArgs jarg1_, String jarg2);
  public final static native String ExecutorArgs_frameworkName_get(long jarg1, ExecutorArgs jarg1_);
  public final static native void ExecutorArgs_data_set(long jarg1, ExecutorArgs jarg1_, byte[] jarg2);
  public final static native byte[] ExecutorArgs_data_get(long jarg1, ExecutorArgs jarg1_);
  public final static native void delete_ExecutorArgs(long jarg1);
  public final static native void delete_Executor(long jarg1);
  public final static native void Executor_init(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_, long jarg3, ExecutorArgs jarg3_);
  public final static native void Executor_initSwigExplicitExecutor(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_, long jarg3, ExecutorArgs jarg3_);
  public final static native void Executor_launchTask(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_, long jarg3, TaskDescription jarg3_);
  public final static native void Executor_launchTaskSwigExplicitExecutor(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_, long jarg3, TaskDescription jarg3_);
  public final static native void Executor_killTask(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_, int jarg3);
  public final static native void Executor_killTaskSwigExplicitExecutor(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_, int jarg3);
  public final static native void Executor_frameworkMessage(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_, long jarg3, FrameworkMessage jarg3_);
  public final static native void Executor_frameworkMessageSwigExplicitExecutor(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_, long jarg3, FrameworkMessage jarg3_);
  public final static native void Executor_shutdown(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_);
  public final static native void Executor_shutdownSwigExplicitExecutor(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_);
  public final static native void Executor_error(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_, int jarg3, String jarg4);
  public final static native void Executor_errorSwigExplicitExecutor(long jarg1, Executor jarg1_, long jarg2, ExecutorDriver jarg2_, int jarg3, String jarg4);
  public final static native long new_Executor();
  public final static native void Executor_director_connect(Executor obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Executor_change_ownership(Executor obj, long cptr, boolean take_or_release);
  public final static native void delete_ExecutorDriver(long jarg1);
  public final static native int ExecutorDriver_start(long jarg1, ExecutorDriver jarg1_);
  public final static native int ExecutorDriver_stop(long jarg1, ExecutorDriver jarg1_);
  public final static native int ExecutorDriver_join(long jarg1, ExecutorDriver jarg1_);
  public final static native int ExecutorDriver_run(long jarg1, ExecutorDriver jarg1_);
  public final static native int ExecutorDriver_sendStatusUpdate(long jarg1, ExecutorDriver jarg1_, long jarg2, TaskStatus jarg2_);
  public final static native int ExecutorDriver_sendFrameworkMessage(long jarg1, ExecutorDriver jarg1_, long jarg2, FrameworkMessage jarg2_);
  public final static native long new_ExecutorDriver();
  public final static native long new_MesosExecutorDriver(long jarg1, Executor jarg1_);
  public final static native void delete_MesosExecutorDriver(long jarg1);
  public final static native int MesosExecutorDriver_start(long jarg1, MesosExecutorDriver jarg1_);
  public final static native int MesosExecutorDriver_stop(long jarg1, MesosExecutorDriver jarg1_);
  public final static native int MesosExecutorDriver_join(long jarg1, MesosExecutorDriver jarg1_);
  public final static native int MesosExecutorDriver_run(long jarg1, MesosExecutorDriver jarg1_);
  public final static native int MesosExecutorDriver_sendStatusUpdate(long jarg1, MesosExecutorDriver jarg1_, long jarg2, TaskStatus jarg2_);
  public final static native int MesosExecutorDriver_sendFrameworkMessage(long jarg1, MesosExecutorDriver jarg1_, long jarg2, FrameworkMessage jarg2_);
  public final static native long MesosExecutorDriver_getExecutor(long jarg1, MesosExecutorDriver jarg1_);
  public final static native long SWIGMesosSchedulerDriverUpcast(long jarg1);
  public final static native long SWIGMesosExecutorDriverUpcast(long jarg1);

  public static String SwigDirector_Scheduler_getFrameworkName(Scheduler self, long arg0) {
    try {
      return self.getFrameworkName((arg0 == 0) ? null : new SchedulerDriver(arg0, false));
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); return null; }
  }
  public static long SwigDirector_Scheduler_getExecutorInfo(Scheduler self, long arg0) {
    try {
      return ExecutorInfo.getCPtr(self.getExecutorInfo((arg0 == 0) ? null : new SchedulerDriver(arg0, false)));
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); return 0; }
  }
  public static void SwigDirector_Scheduler_registered(Scheduler self, long d, String fid) {
    try {
      self.registered((d == 0) ? null : new SchedulerDriver(d, false), fid);
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Scheduler_resourceOffer(Scheduler self, long d, String oid, java.util.List<SlaveOffer> offers) {
    try {
      self.resourceOffer((d == 0) ? null : new SchedulerDriver(d, false), oid, offers);
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Scheduler_offerRescinded(Scheduler self, long d, String oid) {
    try {
      self.offerRescinded((d == 0) ? null : new SchedulerDriver(d, false), oid);
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Scheduler_statusUpdate(Scheduler self, long d, long status) {
    try {
      self.statusUpdate((d == 0) ? null : new SchedulerDriver(d, false), new TaskStatus(status, false));
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Scheduler_frameworkMessage(Scheduler self, long d, long message) {
    try {
      self.frameworkMessage((d == 0) ? null : new SchedulerDriver(d, false), new FrameworkMessage(message, false));
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Scheduler_slaveLost(Scheduler self, long d, String sid) {
    try {
      self.slaveLost((d == 0) ? null : new SchedulerDriver(d, false), sid);
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Scheduler_error(Scheduler self, long d, int code, String message) {
    try {
      self.error((d == 0) ? null : new SchedulerDriver(d, false), code, message);
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Executor_init(Executor self, long d, long args) {
    try {
      self.init((d == 0) ? null : new ExecutorDriver(d, false), new ExecutorArgs(args, false));
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Executor_launchTask(Executor self, long d, long task) {
    try {
      self.launchTask((d == 0) ? null : new ExecutorDriver(d, false), new TaskDescription(task, false));
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Executor_killTask(Executor self, long d, int taskId) {
    try {
      self.killTask((d == 0) ? null : new ExecutorDriver(d, false), taskId);
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Executor_frameworkMessage(Executor self, long d, long message) {
    try {
      self.frameworkMessage((d == 0) ? null : new ExecutorDriver(d, false), new FrameworkMessage(message, false));
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Executor_shutdown(Executor self, long d) {
    try {
      self.shutdown((d == 0) ? null : new ExecutorDriver(d, false));
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }
  public static void SwigDirector_Executor_error(Executor self, long d, int code, String message) {
    try {
      self.error((d == 0) ? null : new ExecutorDriver(d, false), code, message);
    } catch (Throwable t) { t.printStackTrace(); System.exit(-1); }
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
