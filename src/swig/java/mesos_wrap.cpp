/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


  #define SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON
  

     #include <string>
     #include <assert.h>

     jweak mesosClassLoader = NULL;


     JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* jvm, void* reserved)
     {
       // Grab the context ClassLoader of the current thread, if any

       JNIEnv* env;
       if (jvm->GetEnv((void **)&env, JNI_VERSION_1_2)) {
         return JNI_ERR; /* JNI version not supported */
       }

       jclass javaLangThread, javaLangClassLoader;
       jmethodID currentThread, getContextClassLoader, loadClass;
       jobject thread, classLoader;

       /* find this thread's context class loader; none of this is expected to fail */
       javaLangThread = env->FindClass("java/lang/Thread");
       assert(javaLangThread != NULL);
       javaLangClassLoader = env->FindClass("java/lang/ClassLoader");
       assert(javaLangClassLoader != NULL);
       currentThread = env->GetStaticMethodID(javaLangThread,
           "currentThread", "()Ljava/lang/Thread;");
       getContextClassLoader = env->GetMethodID(javaLangThread,
           "getContextClassLoader", "()Ljava/lang/ClassLoader;");
       assert(currentThread != NULL);
       assert(getContextClassLoader != NULL);
       thread = env->CallStaticObjectMethod(javaLangThread, currentThread);
       assert(thread != NULL);
       classLoader = env->CallObjectMethod(thread, getContextClassLoader);
       if (classLoader != NULL) {
         mesosClassLoader = env->NewWeakGlobalRef(classLoader);
       }
 
       return JNI_VERSION_1_2;
     }


     JNIEXPORT void JNICALL JNI_OnUnLoad(JavaVM* jvm, void* reserved)
     {
       JNIEnv *env;
       if (jvm->GetEnv((void **)&env, JNI_VERSION_1_2)) {
           return;
       }
       if (mesosClassLoader != NULL) {
         env->DeleteWeakGlobalRef(mesosClassLoader);
         mesosClassLoader = NULL;
       }
     }


     jclass FindClassWithMesosClassLoader(JNIEnv* env, const char* className)
     {
         if (env->ExceptionCheck()) {
             fprintf(stderr, "ERROR: exception pending on entry to "
                             "FindClassWithMesosClassLoader()\n");
             return NULL;
         }

         if (mesosClassLoader == NULL) {
           return env->FindClass(className);
         }
     
         /*
          * JNI FindClass uses class names with slashes, but ClassLoader.loadClass
          * uses the dotted "binary name" format. Convert formats.
          */
         std::string convName = className;
         for (int i = 0; i < convName.size(); i++) {
           if (convName[i] == '/')
             convName[i] = '.';
         }

         jclass javaLangClassLoader = env->FindClass("java/lang/ClassLoader");
         assert(javaLangClassLoader != NULL);
         jmethodID loadClass = env->GetMethodID(javaLangClassLoader,
             "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
         assert(loadClass != NULL);
         jclass cls = NULL;

         /* create an object for the class name string; alloc could fail */
         jstring strClassName = env->NewStringUTF(convName.c_str());
         if (env->ExceptionCheck()) {
             fprintf(stderr, "ERROR: unable to convert '%s' to string\n", convName.c_str());
             goto bail;
         }

         /* try to find the named class */
         cls = (jclass) env->CallObjectMethod(mesosClassLoader, loadClass,
                                              strClassName);
         if (env->ExceptionCheck()) {
             fprintf(stderr, "ERROR: unable to load class '%s' from %p\n",
                 className, mesosClassLoader);
             cls = NULL;
             goto bail;
         }

     bail:
         return cls;
     }
  
/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  static jclass jclass_mesosJNI = NULL;
  static jmethodID director_methids[15];
}

#include <algorithm>
#include <stdexcept>

#include <mesos_sched.hpp>
#include <mesos_exec.hpp>

#define SWIG_STD_NOASSIGN_STL


#include <stdint.h>		// Use the C99 official header


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "mesos_wrap.h"

SwigDirector_Scheduler::SwigDirector_Scheduler(JNIEnv *jenv) : mesos::Scheduler(), Swig::Director(jenv) {
}

SwigDirector_Scheduler::~SwigDirector_Scheduler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_Scheduler::getFrameworkName(mesos::SchedulerDriver *arg0) {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[0]) {
    return mesos::Scheduler::getFrameworkName(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::SchedulerDriver **)&jarg0) = (mesos::SchedulerDriver *) arg0; 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mesosJNI, Swig::director_methids[0], swigjobj, jarg0);
    if (jenv->ExceptionOccurred()) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

mesos::ExecutorInfo SwigDirector_Scheduler::getExecutorInfo(mesos::SchedulerDriver *arg0) {
  mesos::ExecutorInfo c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  mesos::ExecutorInfo *argp ;
  
  if (!swig_override[1]) {
    return mesos::Scheduler::getExecutorInfo(arg0);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::SchedulerDriver **)&jarg0) = (mesos::SchedulerDriver *) arg0; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_mesosJNI, Swig::director_methids[1], swigjobj, jarg0);
    if (jenv->ExceptionOccurred()) return c_result;
    argp = *(mesos::ExecutorInfo **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type mesos::ExecutorInfo");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Scheduler::registered(mesos::SchedulerDriver *d, mesos::FrameworkID fid) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jstring jfid  ;
  
  if (!swig_override[2]) {
    mesos::Scheduler::registered(d,fid);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::SchedulerDriver **)&jd) = (mesos::SchedulerDriver *) d; 
    jfid = jenv->NewStringUTF((&fid)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[2], swigjobj, jd, jfid);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Scheduler::resourceOffer(mesos::SchedulerDriver *d, mesos::OfferID oid, std::vector< mesos::SlaveOffer > const &offers) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jstring joid  ;
  jobject joffers = 0 ;
  
  if (!swig_override[3]) {
    mesos::Scheduler::resourceOffer(d,oid,offers);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::SchedulerDriver **)&jd) = (mesos::SchedulerDriver *) d; 
    joid = jenv->NewStringUTF((&oid)->c_str()); 
    {
      jclass listCls = FindClassWithMesosClassLoader(jenv, "java/util/ArrayList");
      jmethodID listCtor = jenv->GetMethodID(listCls, "<init>", "()V");
      jmethodID add = jenv->GetMethodID(listCls, "add", "(Ljava/lang/Object;)Z");
      jobject list = jenv->NewObject(listCls, listCtor);
      jclass taskDescCls = FindClassWithMesosClassLoader(jenv, "mesos/SlaveOffer");
      if (jenv->ExceptionOccurred()) {
        jenv->ExceptionDescribe();
      }
      jmethodID taskDescCtor = jenv->GetMethodID(taskDescCls, "<init>", "(JZ)V");
      for (int i = 0; i < (&offers)->size(); i++) {
        // TODO: Copy the SlaveOffer object here so Java owns it?
        jlong ptr;
        *(const mesos::SlaveOffer **)&ptr = &((&offers)->at(i));
        jobject obj = jenv->NewObject(taskDescCls, taskDescCtor, ptr, JNI_FALSE);
        jenv->CallVoidMethod(list, add, obj);
        jenv->DeleteLocalRef(obj); // Recommended in case list is big and fills local ref table
      }
      joffers = list;
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[3], swigjobj, jd, joid, joffers);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Scheduler::offerRescinded(mesos::SchedulerDriver *d, mesos::OfferID oid) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jstring joid  ;
  
  if (!swig_override[4]) {
    mesos::Scheduler::offerRescinded(d,oid);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::SchedulerDriver **)&jd) = (mesos::SchedulerDriver *) d; 
    joid = jenv->NewStringUTF((&oid)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[4], swigjobj, jd, joid);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Scheduler::statusUpdate(mesos::SchedulerDriver *d, mesos::TaskStatus const &status) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jlong jstatus = 0 ;
  
  if (!swig_override[5]) {
    mesos::Scheduler::statusUpdate(d,status);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::SchedulerDriver **)&jd) = (mesos::SchedulerDriver *) d; 
    *(mesos::TaskStatus **)&jstatus = (mesos::TaskStatus *) &status; 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[5], swigjobj, jd, jstatus);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Scheduler::frameworkMessage(mesos::SchedulerDriver *d, mesos::FrameworkMessage const &message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jlong jmessage = 0 ;
  
  if (!swig_override[6]) {
    mesos::Scheduler::frameworkMessage(d,message);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::SchedulerDriver **)&jd) = (mesos::SchedulerDriver *) d; 
    *(mesos::FrameworkMessage **)&jmessage = (mesos::FrameworkMessage *) &message; 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[6], swigjobj, jd, jmessage);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Scheduler::slaveLost(mesos::SchedulerDriver *d, mesos::SlaveID sid) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jstring jsid  ;
  
  if (!swig_override[7]) {
    mesos::Scheduler::slaveLost(d,sid);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::SchedulerDriver **)&jd) = (mesos::SchedulerDriver *) d; 
    jsid = jenv->NewStringUTF((&sid)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[7], swigjobj, jd, jsid);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Scheduler::error(mesos::SchedulerDriver *d, int code, std::string const &message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jint jcode  ;
  jstring jmessage = 0 ;
  
  if (!swig_override[8]) {
    mesos::Scheduler::error(d,code,message);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::SchedulerDriver **)&jd) = (mesos::SchedulerDriver *) d; 
    jcode = (jint) code;
    jmessage = jenv->NewStringUTF((&message)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[8], swigjobj, jd, jcode, jmessage);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Scheduler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getFrameworkName", "(Lmesos/SchedulerDriver;)Ljava/lang/String;", NULL 
    },
    {
      "getExecutorInfo", "(Lmesos/SchedulerDriver;)Lmesos/ExecutorInfo;", NULL 
    },
    {
      "registered", "(Lmesos/SchedulerDriver;Ljava/lang/String;)V", NULL 
    },
    {
      "resourceOffer", "(Lmesos/SchedulerDriver;Ljava/lang/String;Ljava/util/List;)V", NULL 
    },
    {
      "offerRescinded", "(Lmesos/SchedulerDriver;Ljava/lang/String;)V", NULL 
    },
    {
      "statusUpdate", "(Lmesos/SchedulerDriver;Lmesos/TaskStatus;)V", NULL 
    },
    {
      "frameworkMessage", "(Lmesos/SchedulerDriver;Lmesos/FrameworkMessage;)V", NULL 
    },
    {
      "slaveLost", "(Lmesos/SchedulerDriver;Ljava/lang/String;)V", NULL 
    },
    {
      "error", "(Lmesos/SchedulerDriver;ILjava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("mesos/Scheduler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 9; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Executor::SwigDirector_Executor(JNIEnv *jenv) : mesos::Executor(), Swig::Director(jenv) {
}

SwigDirector_Executor::~SwigDirector_Executor() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Executor::init(mesos::ExecutorDriver *d, mesos::ExecutorArgs const &args) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jlong jargs = 0 ;
  
  if (!swig_override[0]) {
    mesos::Executor::init(d,args);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::ExecutorDriver **)&jd) = (mesos::ExecutorDriver *) d; 
    *(mesos::ExecutorArgs **)&jargs = (mesos::ExecutorArgs *) &args; 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[9], swigjobj, jd, jargs);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Executor::launchTask(mesos::ExecutorDriver *d, mesos::TaskDescription const &task) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jlong jtask = 0 ;
  
  if (!swig_override[1]) {
    mesos::Executor::launchTask(d,task);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::ExecutorDriver **)&jd) = (mesos::ExecutorDriver *) d; 
    *(mesos::TaskDescription **)&jtask = (mesos::TaskDescription *) &task; 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[10], swigjobj, jd, jtask);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Executor::killTask(mesos::ExecutorDriver *d, mesos::TaskID taskId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jint jtaskId  ;
  
  if (!swig_override[2]) {
    mesos::Executor::killTask(d,taskId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::ExecutorDriver **)&jd) = (mesos::ExecutorDriver *) d; 
    jtaskId = (jint) taskId;
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[11], swigjobj, jd, jtaskId);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Executor::frameworkMessage(mesos::ExecutorDriver *d, mesos::FrameworkMessage const &message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jlong jmessage = 0 ;
  
  if (!swig_override[3]) {
    mesos::Executor::frameworkMessage(d,message);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::ExecutorDriver **)&jd) = (mesos::ExecutorDriver *) d; 
    *(mesos::FrameworkMessage **)&jmessage = (mesos::FrameworkMessage *) &message; 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[12], swigjobj, jd, jmessage);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Executor::shutdown(mesos::ExecutorDriver *d) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  
  if (!swig_override[4]) {
    mesos::Executor::shutdown(d);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::ExecutorDriver **)&jd) = (mesos::ExecutorDriver *) d; 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[13], swigjobj, jd);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Executor::error(mesos::ExecutorDriver *d, int code, std::string const &message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jint jcode  ;
  jstring jmessage = 0 ;
  
  if (!swig_override[5]) {
    mesos::Executor::error(d,code,message);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mesos::ExecutorDriver **)&jd) = (mesos::ExecutorDriver *) d; 
    jcode = (jint) code;
    jmessage = jenv->NewStringUTF((&message)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_mesosJNI, Swig::director_methids[14], swigjobj, jd, jcode, jmessage);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Executor::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "init", "(Lmesos/ExecutorDriver;Lmesos/ExecutorArgs;)V", NULL 
    },
    {
      "launchTask", "(Lmesos/ExecutorDriver;Lmesos/TaskDescription;)V", NULL 
    },
    {
      "killTask", "(Lmesos/ExecutorDriver;I)V", NULL 
    },
    {
      "frameworkMessage", "(Lmesos/ExecutorDriver;Lmesos/FrameworkMessage;)V", NULL 
    },
    {
      "shutdown", "(Lmesos/ExecutorDriver;)V", NULL 
    },
    {
      "error", "(Lmesos/ExecutorDriver;ILjava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("mesos/Executor");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1TaskDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mesos::TaskDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mesos::TaskDescription *)new mesos::TaskDescription();
  *(mesos::TaskDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1TaskDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jbyteArray jarg5) {
  jlong jresult = 0 ;
  mesos::TaskID arg1 ;
  mesos::SlaveID arg2 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string > *arg4 = 0 ;
  mesos::bytes *arg5 = 0 ;
  mesos::TaskDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mesos::TaskID)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  std::map<std::string, std::string> arg4_map;
  {
    if(!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return 0;
    }
    jclass mapCls = jenv->GetObjectClass(jarg4);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg4, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg4_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg4 = &arg4_map;
  } 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return 0; 
  } 
  const jsize arg5_size = jenv->GetArrayLength(jarg5); 
  jbyte *arg5_ptr = jenv->GetByteArrayElements(jarg5, NULL); 
  mesos::bytes arg5_str((char *) arg5_ptr, arg5_size); 
  jenv->ReleaseByteArrayElements(jarg5, arg5_ptr, JNI_ABORT); 
  arg5 = &arg5_str; 
  
  result = (mesos::TaskDescription *)new mesos::TaskDescription(arg1,arg2,(std::string const &)*arg3,(std::map< std::string,std::string > const &)*arg4,(mesos::bytes const &)*arg5);
  *(mesos::TaskDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_TaskDescription_1taskId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  mesos::TaskID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  arg2 = (mesos::TaskID)jarg2; 
  if (arg1) (arg1)->taskId = arg2;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_TaskDescription_1taskId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  mesos::TaskID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  result = (mesos::TaskID) ((arg1)->taskId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_TaskDescription_1slaveId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  mesos::SlaveID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->slaveId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_TaskDescription_1slaveId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  mesos::SlaveID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  result = (mesos::SlaveID *) & ((arg1)->slaveId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_TaskDescription_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_TaskDescription_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_TaskDescription_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  
  std::map<std::string, std::string> arg2_map;
  {
    if(!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return ;
    }
    jclass mapCls = jenv->GetObjectClass(jarg2);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg2, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return ; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return ; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg2_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg2 = &arg2_map;
  } 
  if (arg1) (arg1)->params = *arg2;
}


SWIGEXPORT jobject JNICALL Java_mesos_mesosJNI_TaskDescription_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  result = (std::map< std::string,std::string > *) & ((arg1)->params);
  {
    jclass mapCls = FindClassWithMesosClassLoader(jenv, "java/util/HashMap");
    jmethodID mapCtor = jenv->GetMethodID(mapCls, "<init>", "()V");
    jmethodID put = jenv->GetMethodID(mapCls, "put",
      "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    jobject mapObj = jenv->NewObject(mapCls, mapCtor);
    for (std::map<std::string, std::string>::const_iterator it = result->begin();
      it != result->end(); ++it)
    {
      jstring keyObj = jenv->NewStringUTF(it->first.c_str());
      if (keyObj == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      jstring valueObj = jenv->NewStringUTF(it->second.c_str());
      if (valueObj == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      jenv->CallObjectMethod(mapObj, put, keyObj, valueObj);
      // Delete local refs to avoid filling up local ref table if map is big
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    jresult = mapObj;
  } 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_TaskDescription_1arg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  mesos::bytes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return ; 
  } 
  const jsize arg2_size = jenv->GetArrayLength(jarg2); 
  jbyte *arg2_ptr = jenv->GetByteArrayElements(jarg2, NULL); 
  mesos::bytes arg2_str((char *) arg2_ptr, arg2_size); 
  jenv->ReleaseByteArrayElements(jarg2, arg2_ptr, JNI_ABORT); 
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->arg = *arg2;
}


SWIGEXPORT jbyteArray JNICALL Java_mesos_mesosJNI_TaskDescription_1arg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  mesos::bytes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  result = (mesos::bytes *) & ((arg1)->arg);
  
  jresult = jenv->NewByteArray(result->size()); 
  jenv->SetByteArrayRegion(jresult, 0, result->size(), (jbyte *) &(*result)[0]); 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1TaskDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::TaskDescription *arg1 = (mesos::TaskDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::TaskDescription **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1TaskStatus_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mesos::TaskStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mesos::TaskStatus *)new mesos::TaskStatus();
  *(mesos::TaskStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1TaskStatus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jbyteArray jarg3) {
  jlong jresult = 0 ;
  mesos::TaskID arg1 ;
  mesos::TaskState arg2 ;
  mesos::bytes *arg3 = 0 ;
  mesos::TaskStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mesos::TaskID)jarg1; 
  arg2 = (mesos::TaskState)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return 0; 
  } 
  const jsize arg3_size = jenv->GetArrayLength(jarg3); 
  jbyte *arg3_ptr = jenv->GetByteArrayElements(jarg3, NULL); 
  mesos::bytes arg3_str((char *) arg3_ptr, arg3_size); 
  jenv->ReleaseByteArrayElements(jarg3, arg3_ptr, JNI_ABORT); 
  arg3 = &arg3_str; 
  
  result = (mesos::TaskStatus *)new mesos::TaskStatus(arg1,arg2,(mesos::bytes const &)*arg3);
  *(mesos::TaskStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_TaskStatus_1taskId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mesos::TaskStatus *arg1 = (mesos::TaskStatus *) 0 ;
  mesos::TaskID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskStatus **)&jarg1; 
  arg2 = (mesos::TaskID)jarg2; 
  if (arg1) (arg1)->taskId = arg2;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_TaskStatus_1taskId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::TaskStatus *arg1 = (mesos::TaskStatus *) 0 ;
  mesos::TaskID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskStatus **)&jarg1; 
  result = (mesos::TaskID) ((arg1)->taskId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_TaskStatus_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mesos::TaskStatus *arg1 = (mesos::TaskStatus *) 0 ;
  mesos::TaskState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskStatus **)&jarg1; 
  arg2 = (mesos::TaskState)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_TaskStatus_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::TaskStatus *arg1 = (mesos::TaskStatus *) 0 ;
  mesos::TaskState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskStatus **)&jarg1; 
  result = (mesos::TaskState) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_TaskStatus_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  mesos::TaskStatus *arg1 = (mesos::TaskStatus *) 0 ;
  mesos::bytes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskStatus **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return ; 
  } 
  const jsize arg2_size = jenv->GetArrayLength(jarg2); 
  jbyte *arg2_ptr = jenv->GetByteArrayElements(jarg2, NULL); 
  mesos::bytes arg2_str((char *) arg2_ptr, arg2_size); 
  jenv->ReleaseByteArrayElements(jarg2, arg2_ptr, JNI_ABORT); 
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT jbyteArray JNICALL Java_mesos_mesosJNI_TaskStatus_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  mesos::TaskStatus *arg1 = (mesos::TaskStatus *) 0 ;
  mesos::bytes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::TaskStatus **)&jarg1; 
  result = (mesos::bytes *) & ((arg1)->data);
  
  jresult = jenv->NewByteArray(result->size()); 
  jenv->SetByteArrayRegion(jresult, 0, result->size(), (jbyte *) &(*result)[0]); 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1TaskStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::TaskStatus *arg1 = (mesos::TaskStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::TaskStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1SlaveOffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mesos::SlaveOffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mesos::SlaveOffer *)new mesos::SlaveOffer();
  *(mesos::SlaveOffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1SlaveOffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  mesos::SlaveID arg1 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string > *arg3 = 0 ;
  mesos::SlaveOffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  std::map<std::string, std::string> arg3_map;
  {
    if(!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return 0;
    }
    jclass mapCls = jenv->GetObjectClass(jarg3);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg3, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg3_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg3 = &arg3_map;
  } 
  result = (mesos::SlaveOffer *)new mesos::SlaveOffer(arg1,(std::string const &)*arg2,(std::map< std::string,std::string > const &)*arg3);
  *(mesos::SlaveOffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_SlaveOffer_1slaveId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mesos::SlaveOffer *arg1 = (mesos::SlaveOffer *) 0 ;
  mesos::SlaveID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SlaveOffer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->slaveId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_SlaveOffer_1slaveId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mesos::SlaveOffer *arg1 = (mesos::SlaveOffer *) 0 ;
  mesos::SlaveID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SlaveOffer **)&jarg1; 
  result = (mesos::SlaveID *) & ((arg1)->slaveId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_SlaveOffer_1host_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mesos::SlaveOffer *arg1 = (mesos::SlaveOffer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SlaveOffer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->host = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_SlaveOffer_1host_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mesos::SlaveOffer *arg1 = (mesos::SlaveOffer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SlaveOffer **)&jarg1; 
  result = (std::string *) & ((arg1)->host);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_SlaveOffer_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  mesos::SlaveOffer *arg1 = (mesos::SlaveOffer *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SlaveOffer **)&jarg1; 
  
  std::map<std::string, std::string> arg2_map;
  {
    if(!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return ;
    }
    jclass mapCls = jenv->GetObjectClass(jarg2);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg2, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return ; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return ; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg2_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg2 = &arg2_map;
  } 
  if (arg1) (arg1)->params = *arg2;
}


SWIGEXPORT jobject JNICALL Java_mesos_mesosJNI_SlaveOffer_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  mesos::SlaveOffer *arg1 = (mesos::SlaveOffer *) 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SlaveOffer **)&jarg1; 
  result = (std::map< std::string,std::string > *) & ((arg1)->params);
  {
    jclass mapCls = FindClassWithMesosClassLoader(jenv, "java/util/HashMap");
    jmethodID mapCtor = jenv->GetMethodID(mapCls, "<init>", "()V");
    jmethodID put = jenv->GetMethodID(mapCls, "put",
      "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    jobject mapObj = jenv->NewObject(mapCls, mapCtor);
    for (std::map<std::string, std::string>::const_iterator it = result->begin();
      it != result->end(); ++it)
    {
      jstring keyObj = jenv->NewStringUTF(it->first.c_str());
      if (keyObj == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      jstring valueObj = jenv->NewStringUTF(it->second.c_str());
      if (valueObj == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      jenv->CallObjectMethod(mapObj, put, keyObj, valueObj);
      // Delete local refs to avoid filling up local ref table if map is big
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    jresult = mapObj;
  } 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1SlaveOffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::SlaveOffer *arg1 = (mesos::SlaveOffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::SlaveOffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1FrameworkMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mesos::FrameworkMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mesos::FrameworkMessage *)new mesos::FrameworkMessage();
  *(mesos::FrameworkMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1FrameworkMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jbyteArray jarg3) {
  jlong jresult = 0 ;
  mesos::SlaveID arg1 ;
  mesos::TaskID arg2 ;
  mesos::bytes *arg3 = 0 ;
  mesos::FrameworkMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (mesos::TaskID)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return 0; 
  } 
  const jsize arg3_size = jenv->GetArrayLength(jarg3); 
  jbyte *arg3_ptr = jenv->GetByteArrayElements(jarg3, NULL); 
  mesos::bytes arg3_str((char *) arg3_ptr, arg3_size); 
  jenv->ReleaseByteArrayElements(jarg3, arg3_ptr, JNI_ABORT); 
  arg3 = &arg3_str; 
  
  result = (mesos::FrameworkMessage *)new mesos::FrameworkMessage(arg1,arg2,(mesos::bytes const &)*arg3);
  *(mesos::FrameworkMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_FrameworkMessage_1slaveId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mesos::FrameworkMessage *arg1 = (mesos::FrameworkMessage *) 0 ;
  mesos::SlaveID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::FrameworkMessage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->slaveId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_FrameworkMessage_1slaveId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mesos::FrameworkMessage *arg1 = (mesos::FrameworkMessage *) 0 ;
  mesos::SlaveID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::FrameworkMessage **)&jarg1; 
  result = (mesos::SlaveID *) & ((arg1)->slaveId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_FrameworkMessage_1taskId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mesos::FrameworkMessage *arg1 = (mesos::FrameworkMessage *) 0 ;
  mesos::TaskID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::FrameworkMessage **)&jarg1; 
  arg2 = (mesos::TaskID)jarg2; 
  if (arg1) (arg1)->taskId = arg2;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_FrameworkMessage_1taskId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::FrameworkMessage *arg1 = (mesos::FrameworkMessage *) 0 ;
  mesos::TaskID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::FrameworkMessage **)&jarg1; 
  result = (mesos::TaskID) ((arg1)->taskId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_FrameworkMessage_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  mesos::FrameworkMessage *arg1 = (mesos::FrameworkMessage *) 0 ;
  mesos::bytes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::FrameworkMessage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return ; 
  } 
  const jsize arg2_size = jenv->GetArrayLength(jarg2); 
  jbyte *arg2_ptr = jenv->GetByteArrayElements(jarg2, NULL); 
  mesos::bytes arg2_str((char *) arg2_ptr, arg2_size); 
  jenv->ReleaseByteArrayElements(jarg2, arg2_ptr, JNI_ABORT); 
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT jbyteArray JNICALL Java_mesos_mesosJNI_FrameworkMessage_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  mesos::FrameworkMessage *arg1 = (mesos::FrameworkMessage *) 0 ;
  mesos::bytes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::FrameworkMessage **)&jarg1; 
  result = (mesos::bytes *) & ((arg1)->data);
  
  jresult = jenv->NewByteArray(result->size()); 
  jenv->SetByteArrayRegion(jresult, 0, result->size(), (jbyte *) &(*result)[0]); 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1FrameworkMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::FrameworkMessage *arg1 = (mesos::FrameworkMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::FrameworkMessage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1ExecutorInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mesos::ExecutorInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mesos::ExecutorInfo *)new mesos::ExecutorInfo();
  *(mesos::ExecutorInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1ExecutorInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jbyteArray jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  mesos::bytes *arg2 = 0 ;
  mesos::ExecutorInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return 0; 
  } 
  const jsize arg2_size = jenv->GetArrayLength(jarg2); 
  jbyte *arg2_ptr = jenv->GetByteArrayElements(jarg2, NULL); 
  mesos::bytes arg2_str((char *) arg2_ptr, arg2_size); 
  jenv->ReleaseByteArrayElements(jarg2, arg2_ptr, JNI_ABORT); 
  arg2 = &arg2_str; 
  
  result = (mesos::ExecutorInfo *)new mesos::ExecutorInfo((std::string const &)*arg1,(mesos::bytes const &)*arg2);
  *(mesos::ExecutorInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1ExecutorInfo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jbyteArray jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  mesos::bytes *arg2 = 0 ;
  std::map< std::string,std::string > *arg3 = 0 ;
  mesos::ExecutorInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return 0; 
  } 
  const jsize arg2_size = jenv->GetArrayLength(jarg2); 
  jbyte *arg2_ptr = jenv->GetByteArrayElements(jarg2, NULL); 
  mesos::bytes arg2_str((char *) arg2_ptr, arg2_size); 
  jenv->ReleaseByteArrayElements(jarg2, arg2_ptr, JNI_ABORT); 
  arg2 = &arg2_str; 
  
  
  std::map<std::string, std::string> arg3_map;
  {
    if(!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return 0;
    }
    jclass mapCls = jenv->GetObjectClass(jarg3);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg3, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg3_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg3 = &arg3_map;
  } 
  result = (mesos::ExecutorInfo *)new mesos::ExecutorInfo((std::string const &)*arg1,(mesos::bytes const &)*arg2,(std::map< std::string,std::string > const &)*arg3);
  *(mesos::ExecutorInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_ExecutorInfo_1uri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mesos::ExecutorInfo *arg1 = (mesos::ExecutorInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_ExecutorInfo_1uri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mesos::ExecutorInfo *arg1 = (mesos::ExecutorInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->uri);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_ExecutorInfo_1initArg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  mesos::ExecutorInfo *arg1 = (mesos::ExecutorInfo *) 0 ;
  mesos::bytes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return ; 
  } 
  const jsize arg2_size = jenv->GetArrayLength(jarg2); 
  jbyte *arg2_ptr = jenv->GetByteArrayElements(jarg2, NULL); 
  mesos::bytes arg2_str((char *) arg2_ptr, arg2_size); 
  jenv->ReleaseByteArrayElements(jarg2, arg2_ptr, JNI_ABORT); 
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->initArg = *arg2;
}


SWIGEXPORT jbyteArray JNICALL Java_mesos_mesosJNI_ExecutorInfo_1initArg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  mesos::ExecutorInfo *arg1 = (mesos::ExecutorInfo *) 0 ;
  mesos::bytes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorInfo **)&jarg1; 
  result = (mesos::bytes *) & ((arg1)->initArg);
  
  jresult = jenv->NewByteArray(result->size()); 
  jenv->SetByteArrayRegion(jresult, 0, result->size(), (jbyte *) &(*result)[0]); 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_ExecutorInfo_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  mesos::ExecutorInfo *arg1 = (mesos::ExecutorInfo *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorInfo **)&jarg1; 
  
  std::map<std::string, std::string> arg2_map;
  {
    if(!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return ;
    }
    jclass mapCls = jenv->GetObjectClass(jarg2);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg2, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return ; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return ; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg2_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg2 = &arg2_map;
  } 
  if (arg1) (arg1)->params = *arg2;
}


SWIGEXPORT jobject JNICALL Java_mesos_mesosJNI_ExecutorInfo_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  mesos::ExecutorInfo *arg1 = (mesos::ExecutorInfo *) 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorInfo **)&jarg1; 
  result = (std::map< std::string,std::string > *) & ((arg1)->params);
  {
    jclass mapCls = FindClassWithMesosClassLoader(jenv, "java/util/HashMap");
    jmethodID mapCtor = jenv->GetMethodID(mapCls, "<init>", "()V");
    jmethodID put = jenv->GetMethodID(mapCls, "put",
      "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    jobject mapObj = jenv->NewObject(mapCls, mapCtor);
    for (std::map<std::string, std::string>::const_iterator it = result->begin();
      it != result->end(); ++it)
    {
      jstring keyObj = jenv->NewStringUTF(it->first.c_str());
      if (keyObj == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      jstring valueObj = jenv->NewStringUTF(it->second.c_str());
      if (valueObj == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      jenv->CallObjectMethod(mapObj, put, keyObj, valueObj);
      // Delete local refs to avoid filling up local ref table if map is big
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    jresult = mapObj;
  } 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1ExecutorInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::ExecutorInfo *arg1 = (mesos::ExecutorInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::ExecutorInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1Scheduler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_Scheduler_1getFrameworkName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  result = (arg1)->getFrameworkName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_Scheduler_1getFrameworkNameSwigExplicitScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  result = (arg1)->mesos::Scheduler::getFrameworkName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_Scheduler_1getExecutorInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::ExecutorInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  result = (arg1)->getExecutorInfo(arg2);
  *(mesos::ExecutorInfo **)&jresult = new mesos::ExecutorInfo((const mesos::ExecutorInfo &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_Scheduler_1getExecutorInfoSwigExplicitScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::ExecutorInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  result = (arg1)->mesos::Scheduler::getExecutorInfo(arg2);
  *(mesos::ExecutorInfo **)&jresult = new mesos::ExecutorInfo((const mesos::ExecutorInfo &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1registered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::FrameworkID arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->registered(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1registeredSwigExplicitScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::FrameworkID arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->mesos::Scheduler::registered(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1resourceOffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jobject jarg4) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::OfferID arg3 ;
  std::vector< mesos::SlaveOffer > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  std::vector<mesos::SlaveOffer> arg4_vec;
  {
    if(!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::vector<mesos::SlaveOffer>");
      return ;
    }
    jclass listCls = jenv->GetObjectClass(jarg4);
    jmethodID iterator = jenv->GetMethodID(listCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(jarg4, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass taskDescCls = FindClassWithMesosClassLoader(jenv, "mesos/SlaveOffer");
    jmethodID getCPtr = jenv->GetStaticMethodID(taskDescCls, "getCPtr", "(Lmesos/SlaveOffer;)J");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      jobject obj = jenv->CallObjectMethod(iterObj, next);
      jlong offerPtr = jenv->CallStaticLongMethod(taskDescCls, getCPtr, obj);
      arg4_vec.push_back(*((mesos::SlaveOffer*) offerPtr));
      jenv->DeleteLocalRef(obj); // Recommended in case list is big and fills local ref table
    }
    arg4 = &arg4_vec;
  } 
  (arg1)->resourceOffer(arg2,arg3,(std::vector< mesos::SlaveOffer > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1resourceOfferSwigExplicitScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jobject jarg4) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::OfferID arg3 ;
  std::vector< mesos::SlaveOffer > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  std::vector<mesos::SlaveOffer> arg4_vec;
  {
    if(!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::vector<mesos::SlaveOffer>");
      return ;
    }
    jclass listCls = jenv->GetObjectClass(jarg4);
    jmethodID iterator = jenv->GetMethodID(listCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(jarg4, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass taskDescCls = FindClassWithMesosClassLoader(jenv, "mesos/SlaveOffer");
    jmethodID getCPtr = jenv->GetStaticMethodID(taskDescCls, "getCPtr", "(Lmesos/SlaveOffer;)J");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      jobject obj = jenv->CallObjectMethod(iterObj, next);
      jlong offerPtr = jenv->CallStaticLongMethod(taskDescCls, getCPtr, obj);
      arg4_vec.push_back(*((mesos::SlaveOffer*) offerPtr));
      jenv->DeleteLocalRef(obj); // Recommended in case list is big and fills local ref table
    }
    arg4 = &arg4_vec;
  } 
  (arg1)->mesos::Scheduler::resourceOffer(arg2,arg3,(std::vector< mesos::SlaveOffer > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1offerRescinded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::OfferID arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->offerRescinded(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1offerRescindedSwigExplicitScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::OfferID arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->mesos::Scheduler::offerRescinded(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1statusUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::TaskStatus *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  arg3 = *(mesos::TaskStatus **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::TaskStatus const & reference is null");
    return ;
  } 
  (arg1)->statusUpdate(arg2,(mesos::TaskStatus const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1statusUpdateSwigExplicitScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::TaskStatus *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  arg3 = *(mesos::TaskStatus **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::TaskStatus const & reference is null");
    return ;
  } 
  (arg1)->mesos::Scheduler::statusUpdate(arg2,(mesos::TaskStatus const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1frameworkMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::FrameworkMessage *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  arg3 = *(mesos::FrameworkMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::FrameworkMessage const & reference is null");
    return ;
  } 
  (arg1)->frameworkMessage(arg2,(mesos::FrameworkMessage const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1frameworkMessageSwigExplicitScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::FrameworkMessage *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  arg3 = *(mesos::FrameworkMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::FrameworkMessage const & reference is null");
    return ;
  } 
  (arg1)->mesos::Scheduler::frameworkMessage(arg2,(mesos::FrameworkMessage const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1slaveLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::SlaveID arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->slaveLost(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1slaveLostSwigExplicitScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  mesos::SlaveID arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->mesos::Scheduler::slaveLost(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jstring jarg4) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->error(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1errorSwigExplicitScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jstring jarg4) {
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  mesos::SchedulerDriver *arg2 = (mesos::SchedulerDriver *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  arg2 = *(mesos::SchedulerDriver **)&jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->mesos::Scheduler::error(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1Scheduler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mesos::Scheduler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mesos::Scheduler *)new SwigDirector_Scheduler(jenv);
  *(mesos::Scheduler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mesos::Scheduler *obj = *((mesos::Scheduler **)&objarg);
  (void)jcls;
  SwigDirector_Scheduler *director = dynamic_cast<SwigDirector_Scheduler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Scheduler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mesos::Scheduler *obj = *((mesos::Scheduler **)&objarg);
  SwigDirector_Scheduler *director = dynamic_cast<SwigDirector_Scheduler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1SchedulerDriver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::SchedulerDriver *arg1 = (mesos::SchedulerDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::SchedulerDriver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_SchedulerDriver_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::SchedulerDriver *arg1 = (mesos::SchedulerDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SchedulerDriver **)&jarg1; 
  result = (int)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_SchedulerDriver_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::SchedulerDriver *arg1 = (mesos::SchedulerDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SchedulerDriver **)&jarg1; 
  result = (int)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_SchedulerDriver_1join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::SchedulerDriver *arg1 = (mesos::SchedulerDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SchedulerDriver **)&jarg1; 
  result = (int)(arg1)->join();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_SchedulerDriver_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::SchedulerDriver *arg1 = (mesos::SchedulerDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SchedulerDriver **)&jarg1; 
  result = (int)(arg1)->run();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_SchedulerDriver_1sendFrameworkMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mesos::SchedulerDriver *arg1 = (mesos::SchedulerDriver *) 0 ;
  mesos::FrameworkMessage *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::SchedulerDriver **)&jarg1; 
  arg2 = *(mesos::FrameworkMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::FrameworkMessage const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->sendFrameworkMessage((mesos::FrameworkMessage const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_SchedulerDriver_1killTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mesos::SchedulerDriver *arg1 = (mesos::SchedulerDriver *) 0 ;
  mesos::TaskID arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SchedulerDriver **)&jarg1; 
  arg2 = (mesos::TaskID)jarg2; 
  result = (int)(arg1)->killTask(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_SchedulerDriver_1replyToOffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3, jobject jarg4) {
  jint jresult = 0 ;
  mesos::SchedulerDriver *arg1 = (mesos::SchedulerDriver *) 0 ;
  mesos::OfferID arg2 ;
  std::vector< mesos::TaskDescription > *arg3 = 0 ;
  std::map< std::string,std::string > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SchedulerDriver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  std::vector<mesos::TaskDescription> arg3_vec;
  {
    if(!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::vector<mesos::TaskDescription>");
      return 0;
    }
    jclass listCls = jenv->GetObjectClass(jarg3);
    jmethodID iterator = jenv->GetMethodID(listCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(jarg3, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass taskDescCls = FindClassWithMesosClassLoader(jenv, "mesos/TaskDescription");
    jmethodID getCPtr = jenv->GetStaticMethodID(taskDescCls, "getCPtr", "(Lmesos/TaskDescription;)J");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      jobject obj = jenv->CallObjectMethod(iterObj, next);
      jlong offerPtr = jenv->CallStaticLongMethod(taskDescCls, getCPtr, obj);
      arg3_vec.push_back(*((mesos::TaskDescription*) offerPtr));
      jenv->DeleteLocalRef(obj); // Recommended in case list is big and fills local ref table
    }
    arg3 = &arg3_vec;
  } 
  
  std::map<std::string, std::string> arg4_map;
  {
    if(!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return 0;
    }
    jclass mapCls = jenv->GetObjectClass(jarg4);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg4, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg4_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg4 = &arg4_map;
  } 
  result = (int)(arg1)->replyToOffer(arg2,(std::vector< mesos::TaskDescription > const &)*arg3,(std::map< std::string,std::string > const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_SchedulerDriver_1reviveOffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::SchedulerDriver *arg1 = (mesos::SchedulerDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SchedulerDriver **)&jarg1; 
  result = (int)(arg1)->reviveOffers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_SchedulerDriver_1sendHints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  mesos::SchedulerDriver *arg1 = (mesos::SchedulerDriver *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::SchedulerDriver **)&jarg1; 
  
  std::map<std::string, std::string> arg2_map;
  {
    if(!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return 0;
    }
    jclass mapCls = jenv->GetObjectClass(jarg2);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg2, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg2_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg2 = &arg2_map;
  } 
  result = (int)(arg1)->sendHints((std::map< std::string,std::string > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1SchedulerDriver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mesos::SchedulerDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mesos::SchedulerDriver *)new mesos::SchedulerDriver();
  *(mesos::SchedulerDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1MesosSchedulerDriver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  std::string *arg2 = 0 ;
  mesos::FrameworkID arg3 ;
  mesos::MesosSchedulerDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (mesos::MesosSchedulerDriver *)new mesos::MesosSchedulerDriver(arg1,(std::string const &)*arg2,arg3);
  *(mesos::MesosSchedulerDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1MesosSchedulerDriver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  std::string *arg2 = 0 ;
  mesos::MesosSchedulerDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (mesos::MesosSchedulerDriver *)new mesos::MesosSchedulerDriver(arg1,(std::string const &)*arg2);
  *(mesos::MesosSchedulerDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1MesosSchedulerDriver_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  mesos::FrameworkID arg3 ;
  mesos::MesosSchedulerDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  
  std::map<std::string, std::string> arg2_map;
  {
    if(!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return 0;
    }
    jclass mapCls = jenv->GetObjectClass(jarg2);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg2, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg2_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg2 = &arg2_map;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (mesos::MesosSchedulerDriver *)new mesos::MesosSchedulerDriver(arg1,(std::map< std::string,std::string > const &)*arg2,arg3);
  *(mesos::MesosSchedulerDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1MesosSchedulerDriver_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  mesos::Scheduler *arg1 = (mesos::Scheduler *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  mesos::MesosSchedulerDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::Scheduler **)&jarg1; 
  
  std::map<std::string, std::string> arg2_map;
  {
    if(!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return 0;
    }
    jclass mapCls = jenv->GetObjectClass(jarg2);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg2, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg2_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg2 = &arg2_map;
  } 
  result = (mesos::MesosSchedulerDriver *)new mesos::MesosSchedulerDriver(arg1,(std::map< std::string,std::string > const &)*arg2);
  *(mesos::MesosSchedulerDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1MesosSchedulerDriver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosSchedulerDriver_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  result = (int)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosSchedulerDriver_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  result = (int)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosSchedulerDriver_1join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  result = (int)(arg1)->join();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosSchedulerDriver_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  result = (int)(arg1)->run();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosSchedulerDriver_1sendFrameworkMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  mesos::FrameworkMessage *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  arg2 = *(mesos::FrameworkMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::FrameworkMessage const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->sendFrameworkMessage((mesos::FrameworkMessage const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosSchedulerDriver_1killTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  mesos::TaskID arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  arg2 = (mesos::TaskID)jarg2; 
  result = (int)(arg1)->killTask(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosSchedulerDriver_1replyToOffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3, jobject jarg4) {
  jint jresult = 0 ;
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  mesos::OfferID arg2 ;
  std::vector< mesos::TaskDescription > *arg3 = 0 ;
  std::map< std::string,std::string > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  std::vector<mesos::TaskDescription> arg3_vec;
  {
    if(!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::vector<mesos::TaskDescription>");
      return 0;
    }
    jclass listCls = jenv->GetObjectClass(jarg3);
    jmethodID iterator = jenv->GetMethodID(listCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(jarg3, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass taskDescCls = FindClassWithMesosClassLoader(jenv, "mesos/TaskDescription");
    jmethodID getCPtr = jenv->GetStaticMethodID(taskDescCls, "getCPtr", "(Lmesos/TaskDescription;)J");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      jobject obj = jenv->CallObjectMethod(iterObj, next);
      jlong offerPtr = jenv->CallStaticLongMethod(taskDescCls, getCPtr, obj);
      arg3_vec.push_back(*((mesos::TaskDescription*) offerPtr));
      jenv->DeleteLocalRef(obj); // Recommended in case list is big and fills local ref table
    }
    arg3 = &arg3_vec;
  } 
  
  std::map<std::string, std::string> arg4_map;
  {
    if(!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return 0;
    }
    jclass mapCls = jenv->GetObjectClass(jarg4);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg4, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg4_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg4 = &arg4_map;
  } 
  result = (int)(arg1)->replyToOffer(arg2,(std::vector< mesos::TaskDescription > const &)*arg3,(std::map< std::string,std::string > const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosSchedulerDriver_1reviveOffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  result = (int)(arg1)->reviveOffers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosSchedulerDriver_1sendHints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  
  std::map<std::string, std::string> arg2_map;
  {
    if(!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
        "null std::map<std::string, std::string>");
      return 0;
    }
    jclass mapCls = jenv->GetObjectClass(jarg2);
    jmethodID entrySet = jenv->GetMethodID(mapCls, "entrySet", "()Ljava/util/Set;");
    jobject entriesObj = jenv->CallObjectMethod(jarg2, entrySet);
    jclass entriesCls = jenv->GetObjectClass(entriesObj);
    jmethodID iterator = jenv->GetMethodID(entriesCls, "iterator", "()Ljava/util/Iterator;");
    jobject iterObj = jenv->CallObjectMethod(entriesObj, iterator);
    jclass iterCls = jenv->GetObjectClass(iterObj);
    jmethodID hasNext = jenv->GetMethodID(iterCls, "hasNext", "()Z");
    jmethodID next = jenv->GetMethodID(iterCls, "next", "()Ljava/lang/Object;");
    jclass entryCls = FindClassWithMesosClassLoader(jenv, "java/util/Map$Entry");
    jmethodID getKey = jenv->GetMethodID(entryCls, "getKey", "()Ljava/lang/Object;");
    jmethodID getValue = jenv->GetMethodID(entryCls, "getValue", "()Ljava/lang/Object;");
    while (jenv->CallBooleanMethod(iterObj, hasNext)) {
      // Get the key and value for this entry
      jobject entryObj = jenv->CallObjectMethod(iterObj, next);
      jstring keyObj = (jstring) jenv->CallObjectMethod(entryObj, getKey);
      jstring valueObj = (jstring) jenv->CallObjectMethod(entryObj, getValue);
      // Convert them to strings
      const char* keyChars = jenv->GetStringUTFChars(keyObj, NULL);
      if (keyChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string keyStr(keyChars);
      jenv->ReleaseStringUTFChars(keyObj, keyChars);
      const char* valueChars = jenv->GetStringUTFChars(valueObj, NULL);
      if (valueChars == NULL) {
        return 0; // OutOfMemoryError has been thrown
      }
      std::string valueStr(valueChars);
      jenv->ReleaseStringUTFChars(valueObj, valueChars);
      // Add the entry to the map
      arg2_map[keyStr] = valueStr;
      // Delete local refs -- recommended in case map is big and fills local ref table.
      jenv->DeleteLocalRef(entryObj);
      jenv->DeleteLocalRef(keyObj);
      jenv->DeleteLocalRef(valueObj);
    }
    arg2 = &arg2_map;
  } 
  result = (int)(arg1)->sendHints((std::map< std::string,std::string > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_MesosSchedulerDriver_1getScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mesos::MesosSchedulerDriver *arg1 = (mesos::MesosSchedulerDriver *) 0 ;
  mesos::Scheduler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosSchedulerDriver **)&jarg1; 
  result = (mesos::Scheduler *)(arg1)->getScheduler();
  *(mesos::Scheduler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1ExecutorArgs_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mesos::ExecutorArgs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mesos::ExecutorArgs *)new mesos::ExecutorArgs();
  *(mesos::ExecutorArgs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1ExecutorArgs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jbyteArray jarg5) {
  jlong jresult = 0 ;
  mesos::SlaveID arg1 ;
  std::string *arg2 = 0 ;
  mesos::FrameworkID arg3 ;
  std::string *arg4 = 0 ;
  mesos::bytes *arg5 = 0 ;
  mesos::ExecutorArgs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return 0; 
  } 
  const jsize arg5_size = jenv->GetArrayLength(jarg5); 
  jbyte *arg5_ptr = jenv->GetByteArrayElements(jarg5, NULL); 
  mesos::bytes arg5_str((char *) arg5_ptr, arg5_size); 
  jenv->ReleaseByteArrayElements(jarg5, arg5_ptr, JNI_ABORT); 
  arg5 = &arg5_str; 
  
  result = (mesos::ExecutorArgs *)new mesos::ExecutorArgs(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,(mesos::bytes const &)*arg5);
  *(mesos::ExecutorArgs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_ExecutorArgs_1slaveId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  mesos::SlaveID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->slaveId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_ExecutorArgs_1slaveId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  mesos::SlaveID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  result = (mesos::SlaveID *) & ((arg1)->slaveId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_ExecutorArgs_1host_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->host = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_ExecutorArgs_1host_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  result = (std::string *) & ((arg1)->host);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_ExecutorArgs_1frameworkId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  mesos::FrameworkID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->frameworkId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_ExecutorArgs_1frameworkId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  mesos::FrameworkID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  result = (mesos::FrameworkID *) & ((arg1)->frameworkId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_ExecutorArgs_1frameworkName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->frameworkName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mesos_mesosJNI_ExecutorArgs_1frameworkName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  result = (std::string *) & ((arg1)->frameworkName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_ExecutorArgs_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  mesos::bytes *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "null mesos::bytes"); 
    return ; 
  } 
  const jsize arg2_size = jenv->GetArrayLength(jarg2); 
  jbyte *arg2_ptr = jenv->GetByteArrayElements(jarg2, NULL); 
  mesos::bytes arg2_str((char *) arg2_ptr, arg2_size); 
  jenv->ReleaseByteArrayElements(jarg2, arg2_ptr, JNI_ABORT); 
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT jbyteArray JNICALL Java_mesos_mesosJNI_ExecutorArgs_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  mesos::bytes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  result = (mesos::bytes *) & ((arg1)->data);
  
  jresult = jenv->NewByteArray(result->size()); 
  jenv->SetByteArrayRegion(jresult, 0, result->size(), (jbyte *) &(*result)[0]); 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1ExecutorArgs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::ExecutorArgs *arg1 = (mesos::ExecutorArgs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::ExecutorArgs **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1Executor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::Executor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  mesos::ExecutorArgs *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  arg3 = *(mesos::ExecutorArgs **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::ExecutorArgs const & reference is null");
    return ;
  } 
  (arg1)->init(arg2,(mesos::ExecutorArgs const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1initSwigExplicitExecutor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  mesos::ExecutorArgs *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  arg3 = *(mesos::ExecutorArgs **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::ExecutorArgs const & reference is null");
    return ;
  } 
  (arg1)->mesos::Executor::init(arg2,(mesos::ExecutorArgs const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1launchTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  mesos::TaskDescription *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  arg3 = *(mesos::TaskDescription **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::TaskDescription const & reference is null");
    return ;
  } 
  (arg1)->launchTask(arg2,(mesos::TaskDescription const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1launchTaskSwigExplicitExecutor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  mesos::TaskDescription *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  arg3 = *(mesos::TaskDescription **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::TaskDescription const & reference is null");
    return ;
  } 
  (arg1)->mesos::Executor::launchTask(arg2,(mesos::TaskDescription const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1killTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  mesos::TaskID arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  arg3 = (mesos::TaskID)jarg3; 
  (arg1)->killTask(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1killTaskSwigExplicitExecutor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  mesos::TaskID arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  arg3 = (mesos::TaskID)jarg3; 
  (arg1)->mesos::Executor::killTask(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1frameworkMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  mesos::FrameworkMessage *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  arg3 = *(mesos::FrameworkMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::FrameworkMessage const & reference is null");
    return ;
  } 
  (arg1)->frameworkMessage(arg2,(mesos::FrameworkMessage const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1frameworkMessageSwigExplicitExecutor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  mesos::FrameworkMessage *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  arg3 = *(mesos::FrameworkMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::FrameworkMessage const & reference is null");
    return ;
  } 
  (arg1)->mesos::Executor::frameworkMessage(arg2,(mesos::FrameworkMessage const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  (arg1)->shutdown(arg2);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1shutdownSwigExplicitExecutor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  (arg1)->mesos::Executor::shutdown(arg2);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jstring jarg4) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->error(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1errorSwigExplicitExecutor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jstring jarg4) {
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::ExecutorDriver *arg2 = (mesos::ExecutorDriver *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::Executor **)&jarg1; 
  arg2 = *(mesos::ExecutorDriver **)&jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->mesos::Executor::error(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1Executor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mesos::Executor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mesos::Executor *)new SwigDirector_Executor(jenv);
  *(mesos::Executor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mesos::Executor *obj = *((mesos::Executor **)&objarg);
  (void)jcls;
  SwigDirector_Executor *director = dynamic_cast<SwigDirector_Executor *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_Executor_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mesos::Executor *obj = *((mesos::Executor **)&objarg);
  SwigDirector_Executor *director = dynamic_cast<SwigDirector_Executor *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1ExecutorDriver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::ExecutorDriver *arg1 = (mesos::ExecutorDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::ExecutorDriver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_ExecutorDriver_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::ExecutorDriver *arg1 = (mesos::ExecutorDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorDriver **)&jarg1; 
  result = (int)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_ExecutorDriver_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::ExecutorDriver *arg1 = (mesos::ExecutorDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorDriver **)&jarg1; 
  result = (int)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_ExecutorDriver_1join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::ExecutorDriver *arg1 = (mesos::ExecutorDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorDriver **)&jarg1; 
  result = (int)(arg1)->join();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_ExecutorDriver_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::ExecutorDriver *arg1 = (mesos::ExecutorDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::ExecutorDriver **)&jarg1; 
  result = (int)(arg1)->run();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_ExecutorDriver_1sendStatusUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mesos::ExecutorDriver *arg1 = (mesos::ExecutorDriver *) 0 ;
  mesos::TaskStatus *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::ExecutorDriver **)&jarg1; 
  arg2 = *(mesos::TaskStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::TaskStatus const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->sendStatusUpdate((mesos::TaskStatus const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_ExecutorDriver_1sendFrameworkMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mesos::ExecutorDriver *arg1 = (mesos::ExecutorDriver *) 0 ;
  mesos::FrameworkMessage *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::ExecutorDriver **)&jarg1; 
  arg2 = *(mesos::FrameworkMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::FrameworkMessage const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->sendFrameworkMessage((mesos::FrameworkMessage const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1ExecutorDriver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mesos::ExecutorDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mesos::ExecutorDriver *)new mesos::ExecutorDriver();
  *(mesos::ExecutorDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_new_1MesosExecutorDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mesos::Executor *arg1 = (mesos::Executor *) 0 ;
  mesos::MesosExecutorDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::Executor **)&jarg1; 
  result = (mesos::MesosExecutorDriver *)new mesos::MesosExecutorDriver(arg1);
  *(mesos::MesosExecutorDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mesos_mesosJNI_delete_1MesosExecutorDriver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mesos::MesosExecutorDriver *arg1 = (mesos::MesosExecutorDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mesos::MesosExecutorDriver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosExecutorDriver_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::MesosExecutorDriver *arg1 = (mesos::MesosExecutorDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosExecutorDriver **)&jarg1; 
  result = (int)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosExecutorDriver_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::MesosExecutorDriver *arg1 = (mesos::MesosExecutorDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosExecutorDriver **)&jarg1; 
  result = (int)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosExecutorDriver_1join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::MesosExecutorDriver *arg1 = (mesos::MesosExecutorDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosExecutorDriver **)&jarg1; 
  result = (int)(arg1)->join();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosExecutorDriver_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mesos::MesosExecutorDriver *arg1 = (mesos::MesosExecutorDriver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosExecutorDriver **)&jarg1; 
  result = (int)(arg1)->run();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosExecutorDriver_1sendStatusUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mesos::MesosExecutorDriver *arg1 = (mesos::MesosExecutorDriver *) 0 ;
  mesos::TaskStatus *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::MesosExecutorDriver **)&jarg1; 
  arg2 = *(mesos::TaskStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::TaskStatus const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->sendStatusUpdate((mesos::TaskStatus const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mesos_mesosJNI_MesosExecutorDriver_1sendFrameworkMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mesos::MesosExecutorDriver *arg1 = (mesos::MesosExecutorDriver *) 0 ;
  mesos::FrameworkMessage *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mesos::MesosExecutorDriver **)&jarg1; 
  arg2 = *(mesos::FrameworkMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mesos::FrameworkMessage const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->sendFrameworkMessage((mesos::FrameworkMessage const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_MesosExecutorDriver_1getExecutor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mesos::MesosExecutorDriver *arg1 = (mesos::MesosExecutorDriver *) 0 ;
  mesos::Executor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mesos::MesosExecutorDriver **)&jarg1; 
  result = (mesos::Executor *)(arg1)->getExecutor();
  *(mesos::Executor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_SWIGMesosSchedulerDriverUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mesos::SchedulerDriver **)&baseptr = *(mesos::MesosSchedulerDriver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_mesos_mesosJNI_SWIGMesosExecutorDriverUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mesos::ExecutorDriver **)&baseptr = *(mesos::MesosExecutorDriver **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_mesos_mesosJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[15] = {
    {
      "SwigDirector_Scheduler_getFrameworkName", "(Lmesos/Scheduler;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Scheduler_getExecutorInfo", "(Lmesos/Scheduler;J)J" 
    },
    {
      "SwigDirector_Scheduler_registered", "(Lmesos/Scheduler;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_Scheduler_resourceOffer", "(Lmesos/Scheduler;JLjava/lang/String;Ljava/util/List;)V" 
    },
    {
      "SwigDirector_Scheduler_offerRescinded", "(Lmesos/Scheduler;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_Scheduler_statusUpdate", "(Lmesos/Scheduler;JJ)V" 
    },
    {
      "SwigDirector_Scheduler_frameworkMessage", "(Lmesos/Scheduler;JJ)V" 
    },
    {
      "SwigDirector_Scheduler_slaveLost", "(Lmesos/Scheduler;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_Scheduler_error", "(Lmesos/Scheduler;JILjava/lang/String;)V" 
    },
    {
      "SwigDirector_Executor_init", "(Lmesos/Executor;JJ)V" 
    },
    {
      "SwigDirector_Executor_launchTask", "(Lmesos/Executor;JJ)V" 
    },
    {
      "SwigDirector_Executor_killTask", "(Lmesos/Executor;JI)V" 
    },
    {
      "SwigDirector_Executor_frameworkMessage", "(Lmesos/Executor;JJ)V" 
    },
    {
      "SwigDirector_Executor_shutdown", "(Lmesos/Executor;J)V" 
    },
    {
      "SwigDirector_Executor_error", "(Lmesos/Executor;JILjava/lang/String;)V" 
    }
  };
  Swig::jclass_mesosJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_mesosJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

