/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_mesos_WRAP_H_
#define SWIG_mesos_WRAP_H_

class SwigDirector_Scheduler : public mesos::Scheduler, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Scheduler(JNIEnv *jenv);
    virtual ~SwigDirector_Scheduler();
    virtual std::string getFrameworkName(mesos::SchedulerDriver *arg0);
    virtual mesos::ExecutorInfo getExecutorInfo(mesos::SchedulerDriver *arg0);
    virtual void registered(mesos::SchedulerDriver *d, mesos::FrameworkID fid);
    virtual void resourceOffer(mesos::SchedulerDriver *d, mesos::OfferID oid, std::vector< mesos::SlaveOffer > const &offers);
    virtual void offerRescinded(mesos::SchedulerDriver *d, mesos::OfferID oid);
    virtual void statusUpdate(mesos::SchedulerDriver *d, mesos::TaskStatus const &status);
    virtual void frameworkMessage(mesos::SchedulerDriver *d, mesos::FrameworkMessage const &message);
    virtual void slaveLost(mesos::SchedulerDriver *d, mesos::SlaveID sid);
    virtual void error(mesos::SchedulerDriver *d, int code, std::string const &message);
public:
    bool swig_overrides(int n) {
      return (n < 9 ? swig_override[n] : false);
    }
protected:
    bool swig_override[9];
};

class SwigDirector_Executor : public mesos::Executor, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Executor(JNIEnv *jenv);
    virtual ~SwigDirector_Executor();
    virtual void init(mesos::ExecutorDriver *d, mesos::ExecutorArgs const &args);
    virtual void launchTask(mesos::ExecutorDriver *d, mesos::TaskDescription const &task);
    virtual void killTask(mesos::ExecutorDriver *d, mesos::TaskID taskId);
    virtual void frameworkMessage(mesos::ExecutorDriver *d, mesos::FrameworkMessage const &message);
    virtual void shutdown(mesos::ExecutorDriver *d);
    virtual void error(mesos::ExecutorDriver *d, int code, std::string const &message);
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};


#endif
