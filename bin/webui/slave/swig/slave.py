# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_slave', [dirname(__file__)])
        except ImportError:
            import _slave
            return _slave
        if fp is not None:
            try:
                _mod = imp.load_module('_slave', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _slave = swig_import_helper()
    del swig_import_helper
else:
    import _slave
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class FrameworkVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameworkVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameworkVec, name)
    __repr__ = _swig_repr
    def iterator(self): return _slave.FrameworkVec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _slave.FrameworkVec___nonzero__(self)
    def __bool__(self): return _slave.FrameworkVec___bool__(self)
    def __len__(self): return _slave.FrameworkVec___len__(self)
    def pop(self): return _slave.FrameworkVec_pop(self)
    def __getslice__(self, *args): return _slave.FrameworkVec___getslice__(self, *args)
    def __setslice__(self, *args): return _slave.FrameworkVec___setslice__(self, *args)
    def __delslice__(self, *args): return _slave.FrameworkVec___delslice__(self, *args)
    def __delitem__(self, *args): return _slave.FrameworkVec___delitem__(self, *args)
    def __getitem__(self, *args): return _slave.FrameworkVec___getitem__(self, *args)
    def __setitem__(self, *args): return _slave.FrameworkVec___setitem__(self, *args)
    def append(self, *args): return _slave.FrameworkVec_append(self, *args)
    def empty(self): return _slave.FrameworkVec_empty(self)
    def size(self): return _slave.FrameworkVec_size(self)
    def clear(self): return _slave.FrameworkVec_clear(self)
    def swap(self, *args): return _slave.FrameworkVec_swap(self, *args)
    def get_allocator(self): return _slave.FrameworkVec_get_allocator(self)
    def begin(self): return _slave.FrameworkVec_begin(self)
    def end(self): return _slave.FrameworkVec_end(self)
    def rbegin(self): return _slave.FrameworkVec_rbegin(self)
    def rend(self): return _slave.FrameworkVec_rend(self)
    def pop_back(self): return _slave.FrameworkVec_pop_back(self)
    def erase(self, *args): return _slave.FrameworkVec_erase(self, *args)
    def __init__(self, *args): 
        this = _slave.new_FrameworkVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _slave.FrameworkVec_push_back(self, *args)
    def front(self): return _slave.FrameworkVec_front(self)
    def back(self): return _slave.FrameworkVec_back(self)
    def assign(self, *args): return _slave.FrameworkVec_assign(self, *args)
    def resize(self, *args): return _slave.FrameworkVec_resize(self, *args)
    def insert(self, *args): return _slave.FrameworkVec_insert(self, *args)
    def reserve(self, *args): return _slave.FrameworkVec_reserve(self, *args)
    def capacity(self): return _slave.FrameworkVec_capacity(self)
    __swig_destroy__ = _slave.delete_FrameworkVec
    __del__ = lambda self : None;
FrameworkVec_swigregister = _slave.FrameworkVec_swigregister
FrameworkVec_swigregister(FrameworkVec)

class TaskVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskVec, name)
    __repr__ = _swig_repr
    def iterator(self): return _slave.TaskVec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _slave.TaskVec___nonzero__(self)
    def __bool__(self): return _slave.TaskVec___bool__(self)
    def __len__(self): return _slave.TaskVec___len__(self)
    def pop(self): return _slave.TaskVec_pop(self)
    def __getslice__(self, *args): return _slave.TaskVec___getslice__(self, *args)
    def __setslice__(self, *args): return _slave.TaskVec___setslice__(self, *args)
    def __delslice__(self, *args): return _slave.TaskVec___delslice__(self, *args)
    def __delitem__(self, *args): return _slave.TaskVec___delitem__(self, *args)
    def __getitem__(self, *args): return _slave.TaskVec___getitem__(self, *args)
    def __setitem__(self, *args): return _slave.TaskVec___setitem__(self, *args)
    def append(self, *args): return _slave.TaskVec_append(self, *args)
    def empty(self): return _slave.TaskVec_empty(self)
    def size(self): return _slave.TaskVec_size(self)
    def clear(self): return _slave.TaskVec_clear(self)
    def swap(self, *args): return _slave.TaskVec_swap(self, *args)
    def get_allocator(self): return _slave.TaskVec_get_allocator(self)
    def begin(self): return _slave.TaskVec_begin(self)
    def end(self): return _slave.TaskVec_end(self)
    def rbegin(self): return _slave.TaskVec_rbegin(self)
    def rend(self): return _slave.TaskVec_rend(self)
    def pop_back(self): return _slave.TaskVec_pop_back(self)
    def erase(self, *args): return _slave.TaskVec_erase(self, *args)
    def __init__(self, *args): 
        this = _slave.new_TaskVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _slave.TaskVec_push_back(self, *args)
    def front(self): return _slave.TaskVec_front(self)
    def back(self): return _slave.TaskVec_back(self)
    def assign(self, *args): return _slave.TaskVec_assign(self, *args)
    def resize(self, *args): return _slave.TaskVec_resize(self, *args)
    def insert(self, *args): return _slave.TaskVec_insert(self, *args)
    def reserve(self, *args): return _slave.TaskVec_reserve(self, *args)
    def capacity(self): return _slave.TaskVec_capacity(self)
    __swig_destroy__ = _slave.delete_TaskVec
    __del__ = lambda self : None;
TaskVec_swigregister = _slave.TaskVec_swigregister
TaskVec_swigregister(TaskVec)

TASK_STARTING = _slave.TASK_STARTING
TASK_RUNNING = _slave.TASK_RUNNING
TASK_FINISHED = _slave.TASK_FINISHED
TASK_FAILED = _slave.TASK_FAILED
TASK_KILLED = _slave.TASK_KILLED
TASK_LOST = _slave.TASK_LOST
class Task(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Task, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _slave.new_Task(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["id"] = _slave.Task_id_set
    __swig_getmethods__["id"] = _slave.Task_id_get
    if _newclass:id = _swig_property(_slave.Task_id_get, _slave.Task_id_set)
    __swig_setmethods__["name"] = _slave.Task_name_set
    __swig_getmethods__["name"] = _slave.Task_name_get
    if _newclass:name = _swig_property(_slave.Task_name_get, _slave.Task_name_set)
    __swig_setmethods__["state"] = _slave.Task_state_set
    __swig_getmethods__["state"] = _slave.Task_state_get
    if _newclass:state = _swig_property(_slave.Task_state_get, _slave.Task_state_set)
    __swig_setmethods__["cpus"] = _slave.Task_cpus_set
    __swig_getmethods__["cpus"] = _slave.Task_cpus_get
    if _newclass:cpus = _swig_property(_slave.Task_cpus_get, _slave.Task_cpus_set)
    __swig_setmethods__["mem"] = _slave.Task_mem_set
    __swig_getmethods__["mem"] = _slave.Task_mem_get
    if _newclass:mem = _swig_property(_slave.Task_mem_get, _slave.Task_mem_set)
    __swig_destroy__ = _slave.delete_Task
    __del__ = lambda self : None;
Task_swigregister = _slave.Task_swigregister
Task_swigregister(Task)

class Framework(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Framework, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Framework, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _slave.new_Framework(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _slave.delete_Framework
    __del__ = lambda self : None;
    __swig_setmethods__["id"] = _slave.Framework_id_set
    __swig_getmethods__["id"] = _slave.Framework_id_get
    if _newclass:id = _swig_property(_slave.Framework_id_get, _slave.Framework_id_set)
    __swig_setmethods__["name"] = _slave.Framework_name_set
    __swig_getmethods__["name"] = _slave.Framework_name_get
    if _newclass:name = _swig_property(_slave.Framework_name_get, _slave.Framework_name_set)
    __swig_setmethods__["executor_uri"] = _slave.Framework_executor_uri_set
    __swig_getmethods__["executor_uri"] = _slave.Framework_executor_uri_get
    if _newclass:executor_uri = _swig_property(_slave.Framework_executor_uri_get, _slave.Framework_executor_uri_set)
    __swig_setmethods__["executor_status"] = _slave.Framework_executor_status_set
    __swig_getmethods__["executor_status"] = _slave.Framework_executor_status_get
    if _newclass:executor_status = _swig_property(_slave.Framework_executor_status_get, _slave.Framework_executor_status_set)
    __swig_setmethods__["cpus"] = _slave.Framework_cpus_set
    __swig_getmethods__["cpus"] = _slave.Framework_cpus_get
    if _newclass:cpus = _swig_property(_slave.Framework_cpus_get, _slave.Framework_cpus_set)
    __swig_setmethods__["mem"] = _slave.Framework_mem_set
    __swig_getmethods__["mem"] = _slave.Framework_mem_get
    if _newclass:mem = _swig_property(_slave.Framework_mem_get, _slave.Framework_mem_set)
    __swig_setmethods__["tasks"] = _slave.Framework_tasks_set
    __swig_getmethods__["tasks"] = _slave.Framework_tasks_get
    if _newclass:tasks = _swig_property(_slave.Framework_tasks_get, _slave.Framework_tasks_set)
Framework_swigregister = _slave.Framework_swigregister
Framework_swigregister(Framework)

class SlaveState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlaveState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlaveState, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _slave.new_SlaveState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _slave.delete_SlaveState
    __del__ = lambda self : None;
    __swig_setmethods__["build_date"] = _slave.SlaveState_build_date_set
    __swig_getmethods__["build_date"] = _slave.SlaveState_build_date_get
    if _newclass:build_date = _swig_property(_slave.SlaveState_build_date_get, _slave.SlaveState_build_date_set)
    __swig_setmethods__["build_user"] = _slave.SlaveState_build_user_set
    __swig_getmethods__["build_user"] = _slave.SlaveState_build_user_get
    if _newclass:build_user = _swig_property(_slave.SlaveState_build_user_get, _slave.SlaveState_build_user_set)
    __swig_setmethods__["id"] = _slave.SlaveState_id_set
    __swig_getmethods__["id"] = _slave.SlaveState_id_get
    if _newclass:id = _swig_property(_slave.SlaveState_id_get, _slave.SlaveState_id_set)
    __swig_setmethods__["cpus"] = _slave.SlaveState_cpus_set
    __swig_getmethods__["cpus"] = _slave.SlaveState_cpus_get
    if _newclass:cpus = _swig_property(_slave.SlaveState_cpus_get, _slave.SlaveState_cpus_set)
    __swig_setmethods__["mem"] = _slave.SlaveState_mem_set
    __swig_getmethods__["mem"] = _slave.SlaveState_mem_get
    if _newclass:mem = _swig_property(_slave.SlaveState_mem_get, _slave.SlaveState_mem_set)
    __swig_setmethods__["pid"] = _slave.SlaveState_pid_set
    __swig_getmethods__["pid"] = _slave.SlaveState_pid_get
    if _newclass:pid = _swig_property(_slave.SlaveState_pid_get, _slave.SlaveState_pid_set)
    __swig_setmethods__["master_pid"] = _slave.SlaveState_master_pid_set
    __swig_getmethods__["master_pid"] = _slave.SlaveState_master_pid_get
    if _newclass:master_pid = _swig_property(_slave.SlaveState_master_pid_get, _slave.SlaveState_master_pid_set)
    __swig_setmethods__["frameworks"] = _slave.SlaveState_frameworks_set
    __swig_getmethods__["frameworks"] = _slave.SlaveState_frameworks_get
    if _newclass:frameworks = _swig_property(_slave.SlaveState_frameworks_get, _slave.SlaveState_frameworks_set)
SlaveState_swigregister = _slave.SlaveState_swigregister
SlaveState_swigregister(SlaveState)


def get_slave():
  return _slave.get_slave()
get_slave = _slave.get_slave


