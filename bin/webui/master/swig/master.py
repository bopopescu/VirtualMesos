# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_master', [dirname(__file__)])
        except ImportError:
            import _master
            return _master
        if fp is not None:
            try:
                _mod = imp.load_module('_master', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _master = swig_import_helper()
    del swig_import_helper
else:
    import _master
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _master.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _master.SwigPyIterator_value(self)
    def incr(self, n = 1): return _master.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _master.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _master.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _master.SwigPyIterator_equal(self, *args)
    def copy(self): return _master.SwigPyIterator_copy(self)
    def next(self): return _master.SwigPyIterator_next(self)
    def __next__(self): return _master.SwigPyIterator___next__(self)
    def previous(self): return _master.SwigPyIterator_previous(self)
    def advance(self, *args): return _master.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _master.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _master.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _master.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _master.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _master.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _master.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _master.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SlaveVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlaveVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlaveVec, name)
    __repr__ = _swig_repr
    def __nonzero__(self): return _master.SlaveVec___nonzero__(self)
    def __bool__(self): return _master.SlaveVec___bool__(self)
    def __len__(self): return _master.SlaveVec___len__(self)
    def pop(self): return _master.SlaveVec_pop(self)
    def __getslice__(self, *args): return _master.SlaveVec___getslice__(self, *args)
    def __setslice__(self, *args): return _master.SlaveVec___setslice__(self, *args)
    def __delslice__(self, *args): return _master.SlaveVec___delslice__(self, *args)
    def __delitem__(self, *args): return _master.SlaveVec___delitem__(self, *args)
    def __getitem__(self, *args): return _master.SlaveVec___getitem__(self, *args)
    def __setitem__(self, *args): return _master.SlaveVec___setitem__(self, *args)
    def append(self, *args): return _master.SlaveVec_append(self, *args)
    def empty(self): return _master.SlaveVec_empty(self)
    def size(self): return _master.SlaveVec_size(self)
    def clear(self): return _master.SlaveVec_clear(self)
    def swap(self, *args): return _master.SlaveVec_swap(self, *args)
    def get_allocator(self): return _master.SlaveVec_get_allocator(self)
    def pop_back(self): return _master.SlaveVec_pop_back(self)
    def __init__(self, *args): 
        this = _master.new_SlaveVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _master.SlaveVec_push_back(self, *args)
    def front(self): return _master.SlaveVec_front(self)
    def back(self): return _master.SlaveVec_back(self)
    def assign(self, *args): return _master.SlaveVec_assign(self, *args)
    def resize(self, *args): return _master.SlaveVec_resize(self, *args)
    def reserve(self, *args): return _master.SlaveVec_reserve(self, *args)
    def capacity(self): return _master.SlaveVec_capacity(self)
    __swig_destroy__ = _master.delete_SlaveVec
    __del__ = lambda self : None;
SlaveVec_swigregister = _master.SlaveVec_swigregister
SlaveVec_swigregister(SlaveVec)

class FrameworkVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameworkVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameworkVec, name)
    __repr__ = _swig_repr
    def __nonzero__(self): return _master.FrameworkVec___nonzero__(self)
    def __bool__(self): return _master.FrameworkVec___bool__(self)
    def __len__(self): return _master.FrameworkVec___len__(self)
    def pop(self): return _master.FrameworkVec_pop(self)
    def __getslice__(self, *args): return _master.FrameworkVec___getslice__(self, *args)
    def __setslice__(self, *args): return _master.FrameworkVec___setslice__(self, *args)
    def __delslice__(self, *args): return _master.FrameworkVec___delslice__(self, *args)
    def __delitem__(self, *args): return _master.FrameworkVec___delitem__(self, *args)
    def __getitem__(self, *args): return _master.FrameworkVec___getitem__(self, *args)
    def __setitem__(self, *args): return _master.FrameworkVec___setitem__(self, *args)
    def append(self, *args): return _master.FrameworkVec_append(self, *args)
    def empty(self): return _master.FrameworkVec_empty(self)
    def size(self): return _master.FrameworkVec_size(self)
    def clear(self): return _master.FrameworkVec_clear(self)
    def swap(self, *args): return _master.FrameworkVec_swap(self, *args)
    def get_allocator(self): return _master.FrameworkVec_get_allocator(self)
    def pop_back(self): return _master.FrameworkVec_pop_back(self)
    def __init__(self, *args): 
        this = _master.new_FrameworkVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _master.FrameworkVec_push_back(self, *args)
    def front(self): return _master.FrameworkVec_front(self)
    def back(self): return _master.FrameworkVec_back(self)
    def assign(self, *args): return _master.FrameworkVec_assign(self, *args)
    def resize(self, *args): return _master.FrameworkVec_resize(self, *args)
    def reserve(self, *args): return _master.FrameworkVec_reserve(self, *args)
    def capacity(self): return _master.FrameworkVec_capacity(self)
    __swig_destroy__ = _master.delete_FrameworkVec
    __del__ = lambda self : None;
FrameworkVec_swigregister = _master.FrameworkVec_swigregister
FrameworkVec_swigregister(FrameworkVec)

class TaskVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskVec, name)
    __repr__ = _swig_repr
    def __nonzero__(self): return _master.TaskVec___nonzero__(self)
    def __bool__(self): return _master.TaskVec___bool__(self)
    def __len__(self): return _master.TaskVec___len__(self)
    def pop(self): return _master.TaskVec_pop(self)
    def __getslice__(self, *args): return _master.TaskVec___getslice__(self, *args)
    def __setslice__(self, *args): return _master.TaskVec___setslice__(self, *args)
    def __delslice__(self, *args): return _master.TaskVec___delslice__(self, *args)
    def __delitem__(self, *args): return _master.TaskVec___delitem__(self, *args)
    def __getitem__(self, *args): return _master.TaskVec___getitem__(self, *args)
    def __setitem__(self, *args): return _master.TaskVec___setitem__(self, *args)
    def append(self, *args): return _master.TaskVec_append(self, *args)
    def empty(self): return _master.TaskVec_empty(self)
    def size(self): return _master.TaskVec_size(self)
    def clear(self): return _master.TaskVec_clear(self)
    def swap(self, *args): return _master.TaskVec_swap(self, *args)
    def get_allocator(self): return _master.TaskVec_get_allocator(self)
    def pop_back(self): return _master.TaskVec_pop_back(self)
    def __init__(self, *args): 
        this = _master.new_TaskVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _master.TaskVec_push_back(self, *args)
    def front(self): return _master.TaskVec_front(self)
    def back(self): return _master.TaskVec_back(self)
    def assign(self, *args): return _master.TaskVec_assign(self, *args)
    def resize(self, *args): return _master.TaskVec_resize(self, *args)
    def reserve(self, *args): return _master.TaskVec_reserve(self, *args)
    def capacity(self): return _master.TaskVec_capacity(self)
    __swig_destroy__ = _master.delete_TaskVec
    __del__ = lambda self : None;
TaskVec_swigregister = _master.TaskVec_swigregister
TaskVec_swigregister(TaskVec)

class OfferVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfferVec, name)
    __repr__ = _swig_repr
    def __nonzero__(self): return _master.OfferVec___nonzero__(self)
    def __bool__(self): return _master.OfferVec___bool__(self)
    def __len__(self): return _master.OfferVec___len__(self)
    def pop(self): return _master.OfferVec_pop(self)
    def __getslice__(self, *args): return _master.OfferVec___getslice__(self, *args)
    def __setslice__(self, *args): return _master.OfferVec___setslice__(self, *args)
    def __delslice__(self, *args): return _master.OfferVec___delslice__(self, *args)
    def __delitem__(self, *args): return _master.OfferVec___delitem__(self, *args)
    def __getitem__(self, *args): return _master.OfferVec___getitem__(self, *args)
    def __setitem__(self, *args): return _master.OfferVec___setitem__(self, *args)
    def append(self, *args): return _master.OfferVec_append(self, *args)
    def empty(self): return _master.OfferVec_empty(self)
    def size(self): return _master.OfferVec_size(self)
    def clear(self): return _master.OfferVec_clear(self)
    def swap(self, *args): return _master.OfferVec_swap(self, *args)
    def get_allocator(self): return _master.OfferVec_get_allocator(self)
    def pop_back(self): return _master.OfferVec_pop_back(self)
    def __init__(self, *args): 
        this = _master.new_OfferVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _master.OfferVec_push_back(self, *args)
    def front(self): return _master.OfferVec_front(self)
    def back(self): return _master.OfferVec_back(self)
    def assign(self, *args): return _master.OfferVec_assign(self, *args)
    def resize(self, *args): return _master.OfferVec_resize(self, *args)
    def reserve(self, *args): return _master.OfferVec_reserve(self, *args)
    def capacity(self): return _master.OfferVec_capacity(self)
    __swig_destroy__ = _master.delete_OfferVec
    __del__ = lambda self : None;
OfferVec_swigregister = _master.OfferVec_swigregister
OfferVec_swigregister(OfferVec)

class SlaveResourcesVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlaveResourcesVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlaveResourcesVec, name)
    __repr__ = _swig_repr
    def __nonzero__(self): return _master.SlaveResourcesVec___nonzero__(self)
    def __bool__(self): return _master.SlaveResourcesVec___bool__(self)
    def __len__(self): return _master.SlaveResourcesVec___len__(self)
    def pop(self): return _master.SlaveResourcesVec_pop(self)
    def __getslice__(self, *args): return _master.SlaveResourcesVec___getslice__(self, *args)
    def __setslice__(self, *args): return _master.SlaveResourcesVec___setslice__(self, *args)
    def __delslice__(self, *args): return _master.SlaveResourcesVec___delslice__(self, *args)
    def __delitem__(self, *args): return _master.SlaveResourcesVec___delitem__(self, *args)
    def __getitem__(self, *args): return _master.SlaveResourcesVec___getitem__(self, *args)
    def __setitem__(self, *args): return _master.SlaveResourcesVec___setitem__(self, *args)
    def append(self, *args): return _master.SlaveResourcesVec_append(self, *args)
    def empty(self): return _master.SlaveResourcesVec_empty(self)
    def size(self): return _master.SlaveResourcesVec_size(self)
    def clear(self): return _master.SlaveResourcesVec_clear(self)
    def swap(self, *args): return _master.SlaveResourcesVec_swap(self, *args)
    def get_allocator(self): return _master.SlaveResourcesVec_get_allocator(self)
    def pop_back(self): return _master.SlaveResourcesVec_pop_back(self)
    def __init__(self, *args): 
        this = _master.new_SlaveResourcesVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _master.SlaveResourcesVec_push_back(self, *args)
    def front(self): return _master.SlaveResourcesVec_front(self)
    def back(self): return _master.SlaveResourcesVec_back(self)
    def assign(self, *args): return _master.SlaveResourcesVec_assign(self, *args)
    def resize(self, *args): return _master.SlaveResourcesVec_resize(self, *args)
    def reserve(self, *args): return _master.SlaveResourcesVec_reserve(self, *args)
    def capacity(self): return _master.SlaveResourcesVec_capacity(self)
    __swig_destroy__ = _master.delete_SlaveResourcesVec
    __del__ = lambda self : None;
SlaveResourcesVec_swigregister = _master.SlaveResourcesVec_swigregister
SlaveResourcesVec_swigregister(SlaveResourcesVec)

TASK_STARTING = _master.TASK_STARTING
TASK_RUNNING = _master.TASK_RUNNING
TASK_FINISHED = _master.TASK_FINISHED
TASK_FAILED = _master.TASK_FAILED
TASK_KILLED = _master.TASK_KILLED
TASK_LOST = _master.TASK_LOST
class SlaveResources(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlaveResources, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlaveResources, name)
    __repr__ = _swig_repr
    __swig_setmethods__["slave_id"] = _master.SlaveResources_slave_id_set
    __swig_getmethods__["slave_id"] = _master.SlaveResources_slave_id_get
    if _newclass:slave_id = _swig_property(_master.SlaveResources_slave_id_get, _master.SlaveResources_slave_id_set)
    __swig_setmethods__["cpus"] = _master.SlaveResources_cpus_set
    __swig_getmethods__["cpus"] = _master.SlaveResources_cpus_get
    if _newclass:cpus = _swig_property(_master.SlaveResources_cpus_get, _master.SlaveResources_cpus_set)
    __swig_setmethods__["mem"] = _master.SlaveResources_mem_set
    __swig_getmethods__["mem"] = _master.SlaveResources_mem_get
    if _newclass:mem = _swig_property(_master.SlaveResources_mem_get, _master.SlaveResources_mem_set)
    def __init__(self, *args): 
        this = _master.new_SlaveResources(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _master.delete_SlaveResources
    __del__ = lambda self : None;
SlaveResources_swigregister = _master.SlaveResources_swigregister
SlaveResources_swigregister(SlaveResources)

class SlotOffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlotOffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlotOffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _master.SlotOffer_id_set
    __swig_getmethods__["id"] = _master.SlotOffer_id_get
    if _newclass:id = _swig_property(_master.SlotOffer_id_get, _master.SlotOffer_id_set)
    __swig_setmethods__["framework_id"] = _master.SlotOffer_framework_id_set
    __swig_getmethods__["framework_id"] = _master.SlotOffer_framework_id_get
    if _newclass:framework_id = _swig_property(_master.SlotOffer_framework_id_get, _master.SlotOffer_framework_id_set)
    __swig_setmethods__["resources"] = _master.SlotOffer_resources_set
    __swig_getmethods__["resources"] = _master.SlotOffer_resources_get
    if _newclass:resources = _swig_property(_master.SlotOffer_resources_get, _master.SlotOffer_resources_set)
    def __init__(self, *args): 
        this = _master.new_SlotOffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _master.delete_SlotOffer
    __del__ = lambda self : None;
SlotOffer_swigregister = _master.SlotOffer_swigregister
SlotOffer_swigregister(SlotOffer)

class Slave(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slave, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slave, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _master.new_Slave(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["id"] = _master.Slave_id_set
    __swig_getmethods__["id"] = _master.Slave_id_get
    if _newclass:id = _swig_property(_master.Slave_id_get, _master.Slave_id_set)
    __swig_setmethods__["host"] = _master.Slave_host_set
    __swig_getmethods__["host"] = _master.Slave_host_get
    if _newclass:host = _swig_property(_master.Slave_host_get, _master.Slave_host_set)
    __swig_setmethods__["web_ui_url"] = _master.Slave_web_ui_url_set
    __swig_getmethods__["web_ui_url"] = _master.Slave_web_ui_url_get
    if _newclass:web_ui_url = _swig_property(_master.Slave_web_ui_url_get, _master.Slave_web_ui_url_set)
    __swig_setmethods__["cpus"] = _master.Slave_cpus_set
    __swig_getmethods__["cpus"] = _master.Slave_cpus_get
    if _newclass:cpus = _swig_property(_master.Slave_cpus_get, _master.Slave_cpus_set)
    __swig_setmethods__["mem"] = _master.Slave_mem_set
    __swig_getmethods__["mem"] = _master.Slave_mem_get
    if _newclass:mem = _swig_property(_master.Slave_mem_get, _master.Slave_mem_set)
    __swig_setmethods__["connect_time"] = _master.Slave_connect_time_set
    __swig_getmethods__["connect_time"] = _master.Slave_connect_time_get
    if _newclass:connect_time = _swig_property(_master.Slave_connect_time_get, _master.Slave_connect_time_set)
    __swig_destroy__ = _master.delete_Slave
    __del__ = lambda self : None;
Slave_swigregister = _master.Slave_swigregister
Slave_swigregister(Slave)

class Task(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Task, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _master.new_Task(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["id"] = _master.Task_id_set
    __swig_getmethods__["id"] = _master.Task_id_get
    if _newclass:id = _swig_property(_master.Task_id_get, _master.Task_id_set)
    __swig_setmethods__["name"] = _master.Task_name_set
    __swig_getmethods__["name"] = _master.Task_name_get
    if _newclass:name = _swig_property(_master.Task_name_get, _master.Task_name_set)
    __swig_setmethods__["framework_id"] = _master.Task_framework_id_set
    __swig_getmethods__["framework_id"] = _master.Task_framework_id_get
    if _newclass:framework_id = _swig_property(_master.Task_framework_id_get, _master.Task_framework_id_set)
    __swig_setmethods__["slave_id"] = _master.Task_slave_id_set
    __swig_getmethods__["slave_id"] = _master.Task_slave_id_get
    if _newclass:slave_id = _swig_property(_master.Task_slave_id_get, _master.Task_slave_id_set)
    __swig_setmethods__["state"] = _master.Task_state_set
    __swig_getmethods__["state"] = _master.Task_state_get
    if _newclass:state = _swig_property(_master.Task_state_get, _master.Task_state_set)
    __swig_setmethods__["cpus"] = _master.Task_cpus_set
    __swig_getmethods__["cpus"] = _master.Task_cpus_get
    if _newclass:cpus = _swig_property(_master.Task_cpus_get, _master.Task_cpus_set)
    __swig_setmethods__["mem"] = _master.Task_mem_set
    __swig_getmethods__["mem"] = _master.Task_mem_get
    if _newclass:mem = _swig_property(_master.Task_mem_get, _master.Task_mem_set)
    __swig_destroy__ = _master.delete_Task
    __del__ = lambda self : None;
Task_swigregister = _master.Task_swigregister
Task_swigregister(Task)

class Framework(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Framework, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Framework, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _master.new_Framework(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _master.delete_Framework
    __del__ = lambda self : None;
    __swig_setmethods__["id"] = _master.Framework_id_set
    __swig_getmethods__["id"] = _master.Framework_id_get
    if _newclass:id = _swig_property(_master.Framework_id_get, _master.Framework_id_set)
    __swig_setmethods__["user"] = _master.Framework_user_set
    __swig_getmethods__["user"] = _master.Framework_user_get
    if _newclass:user = _swig_property(_master.Framework_user_get, _master.Framework_user_set)
    __swig_setmethods__["name"] = _master.Framework_name_set
    __swig_getmethods__["name"] = _master.Framework_name_get
    if _newclass:name = _swig_property(_master.Framework_name_get, _master.Framework_name_set)
    __swig_setmethods__["executor"] = _master.Framework_executor_set
    __swig_getmethods__["executor"] = _master.Framework_executor_get
    if _newclass:executor = _swig_property(_master.Framework_executor_get, _master.Framework_executor_set)
    __swig_setmethods__["cpus"] = _master.Framework_cpus_set
    __swig_getmethods__["cpus"] = _master.Framework_cpus_get
    if _newclass:cpus = _swig_property(_master.Framework_cpus_get, _master.Framework_cpus_set)
    __swig_setmethods__["mem"] = _master.Framework_mem_set
    __swig_getmethods__["mem"] = _master.Framework_mem_get
    if _newclass:mem = _swig_property(_master.Framework_mem_get, _master.Framework_mem_set)
    __swig_setmethods__["connect_time"] = _master.Framework_connect_time_set
    __swig_getmethods__["connect_time"] = _master.Framework_connect_time_get
    if _newclass:connect_time = _swig_property(_master.Framework_connect_time_get, _master.Framework_connect_time_set)
    __swig_setmethods__["tasks"] = _master.Framework_tasks_set
    __swig_getmethods__["tasks"] = _master.Framework_tasks_get
    if _newclass:tasks = _swig_property(_master.Framework_tasks_get, _master.Framework_tasks_set)
    __swig_setmethods__["offers"] = _master.Framework_offers_set
    __swig_getmethods__["offers"] = _master.Framework_offers_get
    if _newclass:offers = _swig_property(_master.Framework_offers_get, _master.Framework_offers_set)
Framework_swigregister = _master.Framework_swigregister
Framework_swigregister(Framework)

class MasterState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MasterState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MasterState, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _master.new_MasterState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _master.delete_MasterState
    __del__ = lambda self : None;
    __swig_setmethods__["build_date"] = _master.MasterState_build_date_set
    __swig_getmethods__["build_date"] = _master.MasterState_build_date_get
    if _newclass:build_date = _swig_property(_master.MasterState_build_date_get, _master.MasterState_build_date_set)
    __swig_setmethods__["build_user"] = _master.MasterState_build_user_set
    __swig_getmethods__["build_user"] = _master.MasterState_build_user_get
    if _newclass:build_user = _swig_property(_master.MasterState_build_user_get, _master.MasterState_build_user_set)
    __swig_setmethods__["pid"] = _master.MasterState_pid_set
    __swig_getmethods__["pid"] = _master.MasterState_pid_get
    if _newclass:pid = _swig_property(_master.MasterState_pid_get, _master.MasterState_pid_set)
    __swig_setmethods__["slaves"] = _master.MasterState_slaves_set
    __swig_getmethods__["slaves"] = _master.MasterState_slaves_get
    if _newclass:slaves = _swig_property(_master.MasterState_slaves_get, _master.MasterState_slaves_set)
    __swig_setmethods__["frameworks"] = _master.MasterState_frameworks_set
    __swig_getmethods__["frameworks"] = _master.MasterState_frameworks_get
    if _newclass:frameworks = _swig_property(_master.MasterState_frameworks_get, _master.MasterState_frameworks_set)
    __swig_setmethods__["isFT"] = _master.MasterState_isFT_set
    __swig_getmethods__["isFT"] = _master.MasterState_isFT_get
    if _newclass:isFT = _swig_property(_master.MasterState_isFT_get, _master.MasterState_isFT_set)
MasterState_swigregister = _master.MasterState_swigregister
MasterState_swigregister(MasterState)


def get_master():
  return _master.get_master()
get_master = _master.get_master


